## You can change the friendly name if you wish on line 7 below. The friendly name is how the device will show in HA 
## However the <name:> is how HA connects to the device eg. esp32-s3-box-3.local is the mDNS hostname for the device.
## Once added to HA changing the device name can lead to connection issues, between HA and the device.

substitutions:
  name: esp32-s3box-3
  friendly_name: esp32-s3box-3

#### Home Assistant Fields ####
## Add in the server address, set the timezone, and change tts speed if slow ##
  home_assistant_host: http://homeassistant.local:8123
  local_time: "America/Chicago" 
  tts_voice_speed: "24000" #options #nabu casa "24000" #piper "16000" elevenlabs "44100" must include quotes

#### Entity Devices ####
## Substitute names for entities to control, a service to perform (i.e. light.lamp & light.toggle), and an icon ##
## Make sure all lines have something or installation might fail! (Leave as "none.none" if not being used) ##
## Icon names can be found at https://pictogrammers.com/library/mdi/ ##
  entity1: none.none
  entity1_service: none.none
  entity1_iconS: "help-circle-outline"

  entity2: none.none
  entity2_service: none.none
  entity2_iconS: "help-circle-outline"

  entity3: none.none
  entity3_service: none.none
  entity3_iconS: "help-circle-outline"

  entity4: none.none
  entity4_service: none.none
  entity4_iconS: "help-circle-outline"

  entity5: none.none
  entity5_service: none.none
  entity5_iconS: "help-circle-outline"

  entity6: none.none
  entity6_service: none.none
  entity6_iconS: "help-circle-outline"

#### Media Players ####
## Substitute names if you want to control additional media players (i.e. media_player.living_room_speaker = living_room_speaker) ##
## Leave as "none" if not being used ##
  local_player: esp32_s3box_3 ##if you change the friendly name or the entity_id in HA, you'll need to change it here to get the entity attributes
  external_player: none  ##to use external, enable the "Output audio externally" switch after installation
  media_player1: none
  media_player2: none

#### Scenes ####
## Substitute names for scenes to activate (i.e. scene.daytime = daytime) ##
## Leave as "none" if not being used ##
  scene1: none
  scene2: none
  scene3: none
  scene4: none

  scene5: none
  scene6: none
  scene7: none
  scene8: none

  scene9: none
  scene10: none
  scene11: none
  scene12: none

#### Weather Entity ####
## Change this if you want to use another weather entity (dependent on attributes) ##
  weather_entity: weather.forecast_home

####  Days and months ####
## Change the values on the right to match your locale ##
  monday: Monday
  tuesday: Tuesday
  wednesday: Wednesday
  thursday: Thursday
  friday: Friday
  saturday: Saturday
  sunday: Sunday
  
  jan: January
  feb: February
  mar: March
  apr: April
  may: May
  jun: June
  jul: July
  aug: August
  sept: September
  oct: October
  nov: November
  dec: December

#### Micro Wake Word Model (Local Only) ####
## These are supported words for local voice processing. If these change in the future, don't touch otherwise. ##
  micro_wake_word_model_1: alexa
  micro_wake_word_model_2: hey_jarvis
  micro_wake_word_model_3: okay_nabu # latest test can also be used >> replace okay_nabu with this url https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu/okay_nabu.json
  micro_wake_word_model_4: hey_mycroft

#### Font Glyphs ####
## This is used for fonts. DO NOT TOUCH ##
  font_glyphs: '&@!"''%()+=,-_.:°/$€£¥?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzÀàÁáÂâÃãÄäĀāĂăÅåǺǻẠạĄąÆæǼǽĆćĈĉČčĊċÇçĎďĐđÐðÈèÉéÊêẼẽĚěËëĒēĔĕĖėẸẹĘęĜĝǦǧĞğĠġĢģĤĥĦħıÌìÍíÎîĨĩÏïĪīĬĭİỊịĮįȷĴĵĶķĸĹĺĽľĻļŁłĿŀŃńÑñŇňŅņƝɲŊŋŉÒòÓóÔôÕõÖöŌōŎŏŐőỌọǪǫØøǾǿŒœŔŕŘřŖŗŚśŜŝŠšŞşȘșẞßŤťŢţȚțŦŧÞþÙùÚúÛûŨũÜüŪūŬŭŮůŰűỤụŲųẀẁẂẃŴŵẄẅỲỳÝýŶŷỸỹŸÿȲȳŹźŽžŻżĲĳƏə'

#### End Substituitons - you should be ready to install now ####
## For advanced users, full configuration begins below ##

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.9.0
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    priority: 600
    then:
      - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
      - display.page.show: loading_page
      - component.update: s3_box_lcd
      - script.execute: saver_enabled
      - lambda: id(time_remaining_0).publish_state ("0:00:00"); 
      - if:
          condition:
            switch.is_on: output_audio
          then:
            media_player.volume_set:    
              id: adf_media_player
              volume: 0 
  project:
    name: "itsRetro.s3boxHASSFrontEnd"
    version: "2024.09.01"
  
esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      CONFIG_ESP32_S3_BOX_3_BOARD: "y"
    components:
      - name: esp32_s3_box_3_board
        source: github://jesserockz/esp32-s3-box-3-board@main
        refresh: 0s
   
psram:
  mode: octal
  speed: 80MHz
  
external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: dev-next
    components: [ adf_pipeline, i2s_audio ]
    refresh: 0s  

api:
  on_client_connected:
    - lambda: |-
        id(api_connection) = true;
    - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
    - component.update: s3_box_lcd
    - script.execute: saver_enabled
  on_client_disconnected:
    - lambda: |-
        id(api_connection) = false;

ota:
  - platform: esphome
    on_begin:
      - lambda: id(led).turn_on().set_brightness(1.0).set_transition_length(0).perform();
                id(led).loop();
      
      - display.page.show: ota_page
      - component.update: s3_box_lcd   
logger:
  hardware_uart: USB_SERIAL_JTAG
  logs:
    text_sensor: WARN
    component: ERROR


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: ${name}
    password: s3box123
  on_connect:
    - lambda: |-
        id(wifi_connection) = true;
    - display.page.show: idle_page
    - component.update: s3_box_lcd
  on_disconnect:
    - lambda: |-
        id(wifi_connection) = false;

captive_portal:    

time:
  - platform: homeassistant
    id: ha_time
    timezone: ${local_time}
    
interval:
  - interval: 30s
    then:
      - component.update: s3_box_lcd
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(api_connection) != true) };'
          then:
            - if:
                condition:
                  api.connected:
                then:
                  - lambda: "id(api_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    api.connected:
                then:
                  - lambda: "id(api_connection) = false;"
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(wifi_connection) != true) };'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = false;"

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: In Home Assistant
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
            - text_sensor.template.publish:
                id: wakeword_location
                state: !lambda 'return "Home Assistant";'
            - component.update: s3_box_lcd
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - text_sensor.template.publish:
                id: wakeword_location
                state: !lambda 'return "On Device";'
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start
            - component.update: s3_box_lcd

  - platform: template
    entity_category: config
    name: Time Format
    id: time_format
    optimistic: true
    restore_value: true
    options:
      - 12 Hr
      - 24 Hr
    initial_option: 24 Hr
    on_value:
      then:
        - if:
            condition:
              lambda: return x == "24 Hr";
            then:
              - text_sensor.template.publish:
                  id: time_display_format
                  state: !lambda 'return "24 Hr";'
            else:
              - text_sensor.template.publish:
                    id: time_display_format
                    state: !lambda 'return "12 Hr";'
        - component.update: s3_box_lcd

  - platform: template
    entity_category: config
    name: Background Mode
    id: background_mode_opt
    optimistic: true
    restore_value: true
    options:
      - Light
      - Dark
    initial_option: Light
    on_value:
      - if:
          condition:
            lambda: return x == "Light";
          then:
            - text_sensor.template.publish:
                id: background_mode
                state: !lambda 'return "Light";'
            - lambda: id(background_mode_set) = true;
            - component.update: s3_box_lcd
      - if:
          condition:
            lambda: return x == "Dark";
          then:
            - text_sensor.template.publish:
                id: background_mode
                state: !lambda 'return "Dark";'
            - lambda: id(background_mode_set) = false;
            - component.update: s3_box_lcd

script:
  - id: set_volume
    then:
      - media_player.volume_set:
          volume: !lambda return 0.5 + id(speaker_volume) * 0.05 ;
          
  - id: saver_enabled
    then:
      - if:
          condition: 
            switch.is_on: s_saver 
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - delay: !lambda return id(s_saver_delay).state * 1000;
            - lambda: id(led).turn_on().set_brightness(id(s_saver_brightness).state /100).perform();
            - display.page.show: saver_page
            - component.update: s3_box_lcd
      - if:
          condition:
            - switch.is_on: s_saver_mode            
          then:
            - delay: !lambda return id(s_saver_blank_delay).state * 1000;
            - light.turn_off: led
    mode: restart

  - id: saver_enabled_manual
    then:
      - if:
          condition: 
            - switch.is_on: s_saver 
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_saver_brightness).state /100).perform();
            - display.page.show: saver_page
            - component.update: s3_box_lcd
      - if:
          condition:
            - switch.is_on: s_saver_mode            
          then:
            - delay: !lambda return id(s_saver_blank_delay).state * 1000;
            - light.turn_off: led
            - component.update: s3_box_lcd
    mode: restart 
 
  - id: timer_started
    then:      
      while:
        condition:
          switch.is_on: timer_ringing
        then:    
          - media_player.play_media:
              media_url: '${home_assistant_host}/local/sounds/timer_finished.mp3'
          - delay: 1s   
        
  - id: timer_started_external
    then:
      while:
        condition:
          switch.is_on: timer_ringing
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: media_player.${external_player}
                media_content_id: '${home_assistant_host}/local/sounds/timer_finished.mp3'
                media_content_type: music
          - delay: 1700ms
        
        
  - id: timer_ending
    then:
      - wait_until: 
            - lambda: return (id(time_remaining_0).state == "0:00:10");
      - script.execute: saver_enabled
      - display.page.show: time_remaining_page
      - component.update: s3_box_lcd         


  - id: increment_digit_1
    then:
      - lambda: |-
          id(current_pin) += "1"; 
          ESP_LOGD("increment_digit_1", "Current PIN: %s", id(current_pin).c_str());

  - id: increment_digit_2
    then:
      - lambda: |-
          id(current_pin) += "2";  
          ESP_LOGD("increment_digit_2", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_3
    then:
      - lambda: |-
          id(current_pin) += "3";  
          ESP_LOGD("increment_digit_3", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_4
    then:
      - lambda: |-
          id(current_pin) += "4";  
          ESP_LOGD("increment_digit_4", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_5
    then:
      - lambda: |-
          id(current_pin) += "5";  
          ESP_LOGD("increment_digit_5", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_6
    then:
      - lambda: |-
          id(current_pin) += "6";  
          ESP_LOGD("increment_digit_6", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_7
    then:
      - lambda: |-
          id(current_pin) += "7";  
          ESP_LOGD("increment_digit_7", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_8
    then:
      - lambda: |-
          id(current_pin) += "8";  
          ESP_LOGD("increment_digit_8", "Current PIN: %s", id(current_pin).c_str());

  - id: increment_digit_9
    then:
      - lambda: |-
          id(current_pin) += "9";  
          ESP_LOGD("increment_digit_9", "Current PIN: %s", id(current_pin).c_str());

  - id: increment_digit_0
    then:
      - lambda: |-
          id(current_pin) += "0";  
          ESP_LOGD("increment_digit_0", "Current PIN: %s", id(current_pin).c_str()); 
    
globals:
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"

  - id: api_connection
    type: bool
    restore_value: no
    initial_value: "false" 

  - id: mute_value
    type: bool
    restore_value: no
    initial_value: "false" 

  - id: speaker_volume
    type: int
    restore_value: no
    initial_value: '5'

  - id: media_state
    type: bool
    restore_value: no
    initial_value: "false"

  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false

  - id: global_is_timer_active
    type: bool
    restore_value: false

  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false

  - id: global_is_timer
    type: bool
    restore_value: false 

  - id: current_pin
    type: std::string
    initial_value: ""

  - id: background_mode_set
    type: bool
    restore_value: false

  - id: entity_page
    type: int
    restore_value: yes
    initial_value: '1'

  - id: media_player_page
    type: int
    restore_value: yes
    initial_value: '1'

  - id: scenes_page_num
    type: int
    restore_value: yes
    initial_value: '1'

  - id: local_player_progress
    type: int
    restore_value: no
    initial_value: '0'

  - id: media_player1_progress
    type: int
    restore_value: no
    initial_value: '0'

  - id: media_player2_progress
    type: int
    restore_value: no
    initial_value: '0'

  - id: isExternal
    type: bool
    restore_value: false

number:
  - id: s_saver_delay
    platform: template
    name: "Scr/save delay"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s3_box_lcd
      - component.update: s_saver_delay
      - script.execute: saver_enabled
      
  - id: s_saver_blank_delay
    platform: template
    name: "Scr/off delay"
    icon: 'mdi:monitor-off'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s_saver_blank_delay
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
      
  - id: s_saver_brightness
    platform: template
    name: "Scr/save Brightness"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: s_saver_brightness
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
      
  - id: s_default_brightness
    platform: template
    name: "Default Brightness"
    icon: 'mdi:monitor'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 100
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: s_default_brightness
      - script.execute: saver_enabled
      - component.update: s3_box_lcd

button:
  - platform: restart
    id: reboot
    name: "Reboot"

switch:
  - platform: template
    name: Display conversation
    id: display_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    icon: 'mdi:chat'

  - platform: template
    name: Output audio externally
    id: output_audio
    icon: 'mdi:volume-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config  
    on_turn_on: 
      then:
      - media_player.volume_set:    
          id: adf_media_player
          volume: 0
      - lambda: id(isExternal) = true;
    on_turn_off:
      then:
      - media_player.volume_set:    
          id: adf_media_player
          volume: 1.0 
      - lambda: id(isExternal) = false;
      
  - platform: template
    name: Mute
    id: mute_switch
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      then:
        - voice_assistant.stop
        - micro_wake_word.stop
    on_turn_off:
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - lambda: id(va).set_use_wake_word(true);
                  - delay: 50ms
                  - voice_assistant.start_continuous
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - micro_wake_word.start
            - component.update: s3_box_lcd

  - platform: template
    id: media_mute
    optimistic: true
    on_turn_on:   
      media_player.volume_set:    
        id: adf_media_player
        volume: 0
    on_turn_off:
      media_player.volume_set: 
        id: adf_media_player
        volume: 1.0       
        
  - platform: template
    id: s_saver
    name: Scr/save enable
    icon: mdi:sleep
    optimistic: true    
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
     
  - platform: template
    id: s_saver_mode
    name: Scr/off enable
    icon: 'mdi:monitor-off'
    optimistic: true    
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
     
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - lambda: id(led).turn_on().set_brightness(1.0).perform();
      - delay: 15min
      - switch.turn_off: timer_ringing 
    on_turn_off:
      - media_player.stop
      
  - platform: template
    id: wake_sound
    name: Play wake sound
    icon: mdi:music
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    
  - platform: template
    id: mute_response_switch
    name: Mute Responses
    icon: mdi:chat-sleep
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    
  - platform: template
    id: ext_media_mute
    icon: 'mdi:volume-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      then:
        - homeassistant.service:
            service: media_player.volume_mute
            data:
              entity_id: media_player.${external_player}
    on_turn_off:
        - homeassistant.service:
            service: media_player.volume_mute
            data:
              entity_id: media_player.${external_player}      

output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 50ms
    
sensor:
  - platform: uptime
    id: up_sens
    on_value:
      - lambda: |-
          int seconds = id(up_sens).state;
          int days = seconds / 86400;
          int hours = seconds / 3600;
          int minutes = (seconds % 3600) / 60;
          seconds %= 60;
          id(up_sens_text).publish_state(str_sprintf("%03d:%02d:%02d:%02d", days, hours, minutes, seconds)); 
    update_interval: 30s

  - platform: wifi_signal
    name: "WiFi db"
    id: wifi_signal_db
    update_interval: 30s
    
  - platform: copy 
    source_id: wifi_signal_db
    name: "WiFi Signal"
    id: wifi_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: "" 

  - platform: homeassistant
    id: weather_temperature
    entity_id: ${weather_entity}
    attribute: temperature

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip_addr
      entity_category: "diagnostic"
    ssid:
      id: connected_ssid
      name: SSID
      entity_category: "diagnostic"
    bssid:
      id: connected_bssid
      name: BSSID
      entity_category: "diagnostic"
    mac_address:
      id: device_mac

  - platform: template
    id: up_sens_text
    name: Device uptime
    entity_category: "diagnostic"
    icon: mdi:clock

  - platform: template
    id: wakeword_location

  - platform: template
    id: time_remaining_0
    name: Timer 
    icon: mdi:clock
               
  - platform: template
    id: time_remaining_1

  - platform: template
    id: time_display_format
    update_interval: never

  - platform: homeassistant
    name: "Alarm Status"
    entity_id: alarm_control_panel.alarmo
    id: alarm_status  
    on_value:
      - component.update: s3_box_lcd 

#### Extra Sensors ####
##Local Media Player (this device)
  - platform: homeassistant
    entity_id: media_player.${local_player}
    id: local_player_name
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${local_player}
    id: local_player_artist
    attribute: media_artist
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${local_player}
    id: local_player_title
    attribute: media_title
    on_value:
      component.update: s3_box_lcd 

  - platform: homeassistant
    id: local_player_duration
    entity_id: media_player.${local_player}
    attribute: media_duration

  - platform: homeassistant
    id: local_player_position
    entity_id: media_player.${local_player}
    attribute: media_position
    on_value:
    - if:
        condition:
          - switch.is_off: output_audio
          - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
        then:
          - lambda: |-
              double status = atof(id(local_player_position).state.c_str());
              double duration = atof(id(local_player_duration).state.c_str());
              double progress = 0;
              int output = 0;

              if(status > 0 && duration > 0) {
                progress = (status / duration);
                output = 225 * progress; //change this if the progress bar size changes (default: 225)
              }

              id(local_player_progress) = output;
    - component.update: s3_box_lcd 

##External Player (on enable)
  - platform: homeassistant
    entity_id: media_player.${external_player}
    id: external_player_state
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${external_player}
    id: external_player_name
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${external_player}
    id: external_player_artist
    attribute: media_artist
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${external_player}
    id: external_player_title
    attribute: media_title
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: external_player_duration
    entity_id: media_player.${external_player}
    attribute: media_duration

  - platform: homeassistant
    id: external_player_position
    entity_id: media_player.${external_player}
    attribute: media_position
    on_value:
    - if:
        condition:
          - switch.is_on: output_audio
          - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
        then:
          - lambda: |-
              double status = atof(id(local_player_position).state.c_str());
              double duration = atof(id(local_player_duration).state.c_str());
              double progress = 0;
              int output = 0;

              if(status > 0 && duration > 0) {
                progress = (status / duration);
                output = 225 * progress; //change this if the progress bar size changes (default: 225)
              }

              id(local_player_progress) = output;
    - component.update: s3_box_lcd 

##Additional Media Player 1
  - platform: homeassistant
    entity_id: media_player.${media_player1}
    id: media_player1_state
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${media_player1}
    id: media_player1_name
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${media_player1}
    id: media_player1_artist
    attribute: media_artist
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${media_player1}
    id: media_player1_title
    attribute: media_title
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: media_player1_duration
    entity_id: media_player.${media_player1}
    attribute: media_duration

  - platform: homeassistant
    id: media_player1_position
    entity_id: media_player.${media_player1}
    attribute: media_position
    on_value:
    - if:
        condition:
          - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
        then:
          - lambda: |-
              double status = atof(id(media_player1_position).state.c_str());
              double duration = atof(id(media_player1_duration).state.c_str());
              double progress = 0;
              int output = 0;

              if(status > 0 && duration > 0) {
                progress = (status / duration);
                output = 225 * progress; //change this if the progress bar size changes (default: 225)
              }

              id(media_player1_progress) = output;
    - component.update: s3_box_lcd 

##Additional Media Player 2
  - platform: homeassistant
    entity_id: media_player.${media_player2}
    id: media_player2_state
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${media_player2}
    id: media_player2_name
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${media_player2}
    id: media_player2_artist
    attribute: media_artist
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${media_player2}
    id: media_player2_title
    attribute: media_title
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: media_player2_duration
    entity_id: media_player.${media_player2}
    attribute: media_duration

  - platform: homeassistant
    id: media_player2_position
    entity_id: media_player.${media_player2}
    attribute: media_position
    on_value:
    - if:
        condition:
          - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
        then:
          - lambda: |-
              double status = atof(id(media_player1_position).state.c_str());
              double duration = atof(id(media_player1_duration).state.c_str());
              double progress = 0;
              int output = 0;

              if(status > 0 && duration > 0) {
                progress = (status / duration);
                output = 225 * progress; //change this if the progress bar size changes (default: 225)
              }

              id(media_player2_progress) = output;
    - component.update: s3_box_lcd 

## Scenes
  - platform: homeassistant
    id: scene1_name
    entity_id: scene.${scene1}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene2_name
    entity_id: scene.${scene2}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene3_name
    entity_id: scene.${scene3}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene4_name
    entity_id: scene.${scene4}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene5_name
    entity_id: scene.${scene5}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene6_name
    entity_id: scene.${scene6}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene7_name
    entity_id: scene.${scene7}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene8_name
    entity_id: scene.${scene8}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene9_name
    entity_id: scene.${scene9}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene10_name
    entity_id: scene.${scene10}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene11_name
    entity_id: scene.${scene11}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    id: scene12_name
    entity_id: scene.${scene12}
    attribute: friendly_name
    on_value:
      component.update: s3_box_lcd

## Background Mode Toggle
  - platform: template
    id: background_mode

  - platform: homeassistant
    id: weather
    entity_id: ${weather_entity}
    on_value:
      - component.update: s3_box_lcd

#### Entity Text Sensors ####
## These display information about entities. Defaults include name and state. For specific attributes, manual changes may be needed ##
  - platform: homeassistant
    id: entity1_state
    entity_id: ${entity1}
    on_value:
      component.update: s3_box_lcd
  - platform: homeassistant
    id: entity1_name
    entity_id: ${entity1}
    attribute: friendly_name

  - platform: homeassistant
    id: entity2_state
    entity_id: ${entity2}
    on_value:
      component.update: s3_box_lcd
  - platform: homeassistant
    id: entity2_name
    entity_id: ${entity2}
    attribute: friendly_name

  - platform: homeassistant
    id: entity3_state
    entity_id: ${entity3}
    on_value:
      component.update: s3_box_lcd
  - platform: homeassistant
    id: entity3_name
    entity_id: ${entity3}
    attribute: friendly_name

  - platform: homeassistant
    id: entity4_state
    entity_id: ${entity4}
    on_value:
      component.update: s3_box_lcd
  - platform: homeassistant
    id: entity4_name
    entity_id: ${entity4}
    attribute: friendly_name

  - platform: homeassistant
    id: entity5_state
    entity_id: ${entity5}
    on_value:
      component.update: s3_box_lcd
  - platform: homeassistant
    id: entity5_name
    entity_id: ${entity5}
    attribute: friendly_name

  - platform: homeassistant
    id: entity6_state
    entity_id: ${entity6}
    on_value:
      component.update: s3_box_lcd
  - platform: homeassistant
    id: entity6_name
    entity_id: ${entity6}
    attribute: friendly_name

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin:
      number: GPIO45
      ignore_strapping_warning: true
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2
    access_mode: duplex

adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_shared
    i2s_dout_pin: GPIO15
    adf_alc: false
    dac:
      i2c_id: bus_a
      model: es8311
      address: 0x18
      enable_pin:
        number: GPIO46
        ignore_strapping_warning: true
    sample_rate: 16000
    bits_per_sample: 16bit
    fixed_settings: true

  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    i2s_audio_id: i2s_shared
    i2s_din_pin: GPIO16
    pdm: false
    adc:
      i2c_id: bus_a
      model: es7210
      address: 0x40
    sample_rate: 16000
    bits_per_sample: 16bit
    fixed_settings: true

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: s3-box_media_player
    internal: false
    keep_pipeline_alive: true
    announcement_audio:
      sample_rate: ${tts_voice_speed}
      bits_per_sample: 16
      num_channels: 1
    pipeline:
      - self
      - resampler
      - adf_i2s_out
    on_play: 
      - lambda: |-
          id(media_state) = true;
      - component.update: s3_box_lcd
    on_idle:
      - lambda: |-
          id(media_state) = false;
      - component.update: s3_box_lcd

microphone:
  - platform: adf_pipeline
    id: box_mic
    keep_pipeline_alive: true
    pipeline:
      - adf_i2s_in
      - resampler
      - self

micro_wake_word:  
  vad:
  models: 
    - model: ${micro_wake_word_model_1}
    - model: ${micro_wake_word_model_2}
    - model: ${micro_wake_word_model_3}
    - model: ${micro_wake_word_model_4}
  on_wake_word_detected:
    - if:
        condition:
          and:
            - switch.is_off: output_audio          
            - switch.is_on: wake_sound
        then:
          - media_player.play_media:
              id: adf_media_player
              media_url: '${home_assistant_host}/local/sounds/awake.mp3'
          - delay: 500ms
          - media_player.stop
          - voice_assistant.start
        else:
          if:
            condition:
              and:
                - switch.is_on: output_audio
                - switch.is_on: wake_sound
            then:
              - homeassistant.service:
                  service: media_player.play_media
                  data:
                    entity_id: media_player.${external_player}
                    media_content_id: '${home_assistant_host}/local/sounds/awake.mp3'
                    media_content_type: music
              - media_player.stop
              - voice_assistant.start
            else:
              if:
                condition:
                  - switch.is_off: wake_sound
                then:
                  - media_player.stop
                  - voice_assistant.start

voice_assistant:
  id: va
  microphone: box_mic
  media_player: adf_media_player
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 4.0
  on_wake_word_detected:
    - if:
        condition:
          and:
            - switch.is_off: output_audio          
            - switch.is_on: wake_sound
        then:    
          - media_player.play_media:
              media_url: '${home_assistant_host}/local/sounds/awake.mp3'
          - delay: 500ms
          - media_player.stop
          - display.page.show: listening_page
          - component.update: s3_box_lcd
        else:
          if:
            condition:
              and:
                - switch.is_on: wake_sound
                - switch.is_on: output_audio
            then:
              - homeassistant.service:
                  service: media_player.play_media
                  data:
                    entity_id: media_player.${external_player}
                    media_content_id: '${home_assistant_host}/local/sounds/awake.mp3'
                    media_content_type: music
    - media_player.stop
  on_start:    
    if: 
      condition:
        - display.is_displaying_page: listening_page
        - display.is_displaying_page: thinking_page
      then:
        - display.page.show: idle_page
        - component.update: s3_box_lcd
  on_listening:
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: saver_enabled
    - display.page.show: listening_page
    - component.update: s3_box_lcd
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
  on_stt_vad_end: 
    - display.page.show: thinking_page
    - component.update: s3_box_lcd
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
  on_tts_end:
    - if:
        condition: 
          and:
            - switch.is_on: mute_response_switch
            - switch.is_off: media_mute
            - switch.is_off: ext_media_mute
        then:
          - switch.turn_on: media_mute
          - switch.turn_on: ext_media_mute                  
    - display.page.show: replying_page
    - component.update: s3_box_lcd
    - if:
        condition:
          - switch.is_on: output_audio
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: media_player.${external_player}
                media_content_id: !lambda 'return x;'
                media_content_type: music
                announce: "false"
    - delay: 5s
    - display.page.show: idle_page
    - component.update: s3_box_lcd
   
  on_error:
    - if:
        condition:
          not:
            - voice_assistant.is_running
        then:
          - display.page.show: error_page
          - component.update: s3_box_lcd
          - delay: 4s
          - if:
              condition:
                - display.is_displaying_page: error_page
              then:
                - display.page.show: idle_page
                - component.update: s3_box_lcd

  on_idle:
    - display.page.show: idle_page
    - component.update: s3_box_lcd 
    
  on_end:
    - if:
        condition:
          and:
            - switch.is_off: mute_switch
            - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - voice_assistant.stop
          - wait_until:
              not:
                voice_assistant.is_running:
          - delay: 100ms
          - micro_wake_word.start

        else:
          if:
            condition: 
              - switch.is_off: mute_switch  
            then:              
              - wait_until:
                  not:
                    voice_assistant.is_running:
              - lambda: id(va).set_use_wake_word(false);
              - voice_assistant.stop:    
              - delay: 100ms
              - lambda: id(va).set_use_wake_word(true);
              - delay: 100ms
              - voice_assistant.start 
    - if:
        condition: 
          and:
            - switch.is_on: mute_response_switch
            - switch.is_on: media_mute
            - switch.is_on: ext_media_mute
        then:
           - switch.turn_off: media_mute
           - switch.turn_off: ext_media_mute 
          
  on_client_connected:
    - if:
        condition:
          and:
            - switch.is_off: mute_switch
            - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.start 
        else:
          - if:
              condition: 
                - switch.is_off: mute_switch          
              then:
                - lambda: id(va).set_use_wake_word(true);
                - voice_assistant.start      
  on_timer_started:
    - script.execute: timer_ending
    - component.update: s3_box_lcd
  on_timer_cancelled:
    - lambda: id(time_remaining_0).publish_state ("0:00:00"); 
    - component.update: s3_box_lcd
  on_timer_updated:
    - component.update: s3_box_lcd
  on_timer_tick:
    - lambda: |-
        int seconds = timers[0].seconds_left;
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        seconds %= 60;
        id(time_remaining_0).publish_state(str_sprintf("%d:%02d:%02d", hours, minutes, seconds)); 
    - component.update: s3_box_lcd
  on_timer_finished:
    if: 
      condition:
        - switch.is_on: output_audio
      then:
        - switch.turn_on: timer_ringing
        - script.execute: timer_started_external
        - display.page.show: timer_finished_page
        - component.update: s3_box_lcd
      else:
        - if:
            condition:
              - switch.is_off: output_audio
            then:
              - switch.turn_on: timer_ringing
              - script.execute: timer_started
              - display.page.show: timer_finished_page
              - component.update: s3_box_lcd      

#### Assist Images ####
## Change these file locations if you want to change the images used for Assist actions ##
image:
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/error.png"
    id: error_img
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/idle.png"
    id: idle_img
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/listening.png"
    id: listening_img
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/thinking.png"
    id: thinking_img
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/replying.png"
    id: replying_img
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/loading.png"
    id: loading_img
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/logo.png"
    id: logo_img
    resize: 80x75
    type: RGB24
    use_transparency: true 

#### Entity Icons ####
## Use the substitutions above, and all below will autofill ##
  - file: mdi:${entity1_iconS}
    id: entity1_icon
    resize: 30x30

  - file: mdi:${entity2_iconS}
    id: entity2_icon
    resize: 30x30

  - file: mdi:${entity3_iconS}
    id: entity3_icon
    resize: 30x30

  - file: mdi:${entity4_iconS}
    id: entity4_icon
    resize: 30x30

  - file: mdi:${entity5_iconS}
    id: entity5_icon
    resize: 30x30

  - file: mdi:${entity6_iconS}
    id: entity6_icon
    resize: 30x30
 
font:
  - file: "gfonts://Roboto"
    id: roboto_30
    size: 30
    glyphs: 
      '${font_glyphs}'

  - file: "gfonts://Roboto"
    id: roboto_18
    size: 18
    glyphs: 
      '${font_glyphs}'

  - file: "gfonts://Roboto"
    id: roboto_14
    size: 14
    glyphs: 
      '${font_glyphs}'

  - file: "gfonts://Roboto"
    id: roboto_12
    size: 12
    glyphs: 
      '${font_glyphs}'

  - file: "gfonts://Roboto"
    id: roboto_9
    size: 9
    glyphs: 
      '${font_glyphs}'

#### Original Fonts from main project / fonts folder ####
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font
    size: 14
    glyphs:
      '${font_glyphs}'

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font16
    size: 16
    glyphs:
      '${font_glyphs}'
      
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font2
    size: 72
    glyphs:
      '${font_glyphs}'

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font3
    size: 28
    glyphs:
      '${font_glyphs}'

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font4
    size: 40
    glyphs:
      '${font_glyphs}'
      
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font18
    size: 18
    glyphs:
      '${font_glyphs}'      
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font5
    size: 22
    glyphs:
      '${font_glyphs}'
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font6
    size: 50
    glyphs:
      '${font_glyphs}'

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/consola.ttf"
    id: my_font82
    size: 82
    glyphs:
      '${font_glyphs}'

#### Icons ####
## If an icon fails to load, be sure to check it's added here first ##
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_30
    size: 30
    glyphs: &icon_glyphs
      - "\U000F0079"#battery 100%
      - "\U000F007A"#battery 10%
      - "\U000F007B"#battery 20%
      - "\U000F007C"#battery 30%
      - "\U000F007D"#battery 40%
      - "\U000F007E"#battery 50%
      - "\U000F007F"#battery 60%
      - "\U000F0080"#battery 70%
      - "\U000F0081"#battery 80%
      - "\U000F0082"#battery 90%
      - "\U000F009E"#bell
      - "\U000F0150"#clock
      - "\U000F01AE"#gbp pound symbol
      - "\U000F0210"#fan
      - "\U000F0238"#heating
      - "\U000F024A"#garden/flower
      - "\U000F0335"#light bulb off
      - "\U000F036C"#microphone on 
      - "\U000F036D"#microphone off 
      - "\U000F036F"#voice settings
      - "\U000F03E4"#pause
      - "\U000F040A"#play
      - "\U000F040E"#play/pause
      - "\U000F0493"#settings cog
      - "\U000F04AD"#next track
      - "\U000F04AE"#previous track
      - "\U000F04B9"#living room
      - "\U000F04C8"#spots
      - "\U000F04DB"#stop
      - "\U000F0502"#screen settings
      - "\U000F050F"#temp sensor
      - "\U000F0521"#toggle on
      - "\U000F0565"#arming
      - "\U000F057E"#speaker on
      - "\U000F0581"#speaker off
      - "\U000F05CB"#voice
      - "\U000F068A"#alarm home
      - "\U000F06E8"#light bulb illuminated
      - "\U000F075A"#music 
      - "\U000F075D"#vol plus
      - "\U000F075E"#vol minus
      - "\U000F0769"#ceiling
      - "\U000F07D0"#api connected
      - "\U000F07F4"#tv
      - "\U000F0873"#car miles non
      - "\U000F0874"#car miles full
      - "\U000F0875"#car miles low
      - "\U000F087B"#api disconnected
      - "\U000F08D6"#settings
      - "\U000F099D"#alarm away
      - "\U000F099E"#disarmed
      - "\U000F0A19"#toggle off
      - "\U000F0B26"#down
      - "\U000F0B28"#left
      - "\U000F0B2A"#right
      - "\U000F0B2C"#up
      - "\U000F0B6C"#car battery
      - "\U000F0D90"#screen off
      - "\U000F0EBA"#stats
      - "\U000F0ED4"#voice off
      - "\U000F0FCE"#scene
      - "\U000F1061"#dining
      - "\U000F10CD"#battery warning
      - "\U000F1160"#kitchen
      - "\U000F12A8"#touch button
      - "\U000F12D3"#garage closed
      - "\U000F12D4"#garage open
      - "\U000F1322"#tools
      - "\U000F16BC"#wifidisconnected
      - "\U000F16BD"#wifi connected
      - "\U000F1722"#fire off
      - "\U000F1747"#tall lamp
      - "\U000F1828"#armed night
      - "\U000F192D"#electricity
      - "\U000F1987"#floods
      - "\U000F1A12"#home button
      - "\U000F1A1B"#gas
      - "\U000F1C3B"#battery charging/usb powered
      - "\U000F1C6F"#info
      - "\U000F035C"#menu
      - "\U000F0185"#assist
      - "\U000F12C4"#assist-configure
      - "\U000F050E"#light-dark-mode
      - "\U000F03A4"#box-1
      - "\U000F03A7"#box-2
      - "\U000F03AA"#box-3
      - "\U000F0594"#weather-clear-night
      - "\U000F0590"#weather-cloudy
      - "\U000F0591"#weather-fog
      - "\U000F0592"#weather-hail
      - "\U000F0593"#weather-lightning
      - "\U000F067E"#weather-lightning-rainy
      - "\U000F0595"#weather-partly-cloudy
      - "\U000F0596"#weather-pouring
      - "\U000F0597"#weather-rainy
      - "\U000F0598"#weather-snowy
      - "\U000F067F"#weather-snowy-rainy
      - "\U000F0599"#weather-sunny
      - "\U000F059D"#weather-windy
      - "\U000F059E"#weather-windy-variant
      - "\U000F0F2F"#weather-exceptional
      - "\U000F05A9"#wifi
      - "\U000F097E"#switch
      - "\U000F0425"#power
      - "\U000F04C3"#speaker
      
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_60
    size: 60
    glyphs: *icon_glyphs

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_55
    size: 55
    glyphs: *icon_glyphs

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_20
    size: 20
    glyphs: *icon_glyphs

#### Additional Icon Sizes ####
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/DSEG14Classic-Regular.ttf"    
    id: my_fontseg
    size: 72

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/DSEG7Classic-Regular.ttf"
    id: my_fontseg2
    size: 52 #original = 72

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_180
    size: 180
    glyphs: *icon_glyphs

  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_80
    size: 75
    glyphs: *icon_glyphs

color:
  - id: green
    hex: '75D15F'
  - id: red
    hex: 'FF3131'
  - id: blue
    hex: '47B7E9'
  - id: blue_drk
    hex: '085296'
  - id: amber
    hex: 'FBAB35'
  - id: lime
    hex: '20FC30'
  - id: pink
    hex: 'D92BBC'
  - id: yellow
    hex: 'FFC000'
  - id: black
    hex: '000000'
  - id: white
    hex: 'ffffff'
  - id: purple
    hex: '73264D'
  - id: light_blue
    hex: 'CFE2F3'
  - id: gray
    hex: 'B4B4B4'
  - id: orange
    hex: 'FFA500'

#### Background Mode Colors ####
## Change these if you want to change the default colors for each mode ##
## Light Mode ##
  - id: background_light        #background-color
    hex: 'FAFAFA'
  - id: primary_light           #topbar
    hex: '03A9F4'
  - id: secondary_light         #sidebar-icon-background
    hex: 'E0F5FE'
  - id: divider_light           #border
    hex: 'E0E0E0'

  - id: icons_light             #icons
    hex: '7A7A7A'

  - id: secondary_text_color_light
    hex: '727272'

  - id: weather_icon_backdrop_light
    hex: 'DAE3EC'

  - id: entity_icon_backdrop_off_light
    hex: 'ECECEC'

## Dark Mode ##
  - id: background_dark         #background-color
    hex: '111111'
  - id: primary_dark            #topbar
    hex: '101E24'
  - id: secondary_dark          #selected icon
    hex: '192E37'
  - id: sidebar_dark            #sidebar
    hex: '1C1C1C'
  - id: divider_dark            #border
    hex: '343434'

  - id: icons_dark              #text and icons
    hex: '929292'
  - id: icons_secondary_dark    #selected icon & assist on the topbar
    hex: 'E1E1E1'
  - id: icons_secondary_unselected_dark
    hex: 'B7BABB'

  - id: primary_text_color_dark
    hex: 'E0E0E0'
  - id: secondary_text_color_dark
    hex: '9B9B9B'

  - id: weather_icon_backdrop_dark
    hex: '242D36'
  - id: entity_icon_backdrop_off_dark
    hex: '363636'

## Universal (Both Modes) ##
  - id: selected_icon
    hex: '03A9F4'

  - id: weather_icon
    hex: '44739E'

  - id: entity_icon_off
    hex: '9E9E9E'

spi:
  clk_pin: 7
  mosi_pin: 6

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    invert_colors: false
    pages:

#### Idle/Main Page ####
## The main page, which includes weather and timer information ##
      - id: idle_page
        lambda: |-  
          it.fill(id(background_mode_set) ? id(background_light) : id(background_dark));                                          //background-color

          it.filled_rectangle(0, 0, 320, 40, id(background_mode_set) ? primary_light : primary_dark);
          it.filled_rectangle(0, 0, 40, 240, id(background_mode_set) ? white : sidebar_dark);

          it.line(0, 40, 40, 40, id(background_mode_set) ? divider_light : divider_dark);
          it.line(40, 0, 40, 240, id(background_mode_set) ? divider_light : divider_dark);
          it.line(0, 199, 40, 199, id(background_mode_set) ? divider_light : divider_dark);

          it.printf(5, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F035C");                    //menu
          it.printf(285, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F0185");              //assist

          it.printf(5, 47, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F06E8" );                  //light
          it.printf(5, 82, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0FCE");                   //scenes
          it.printf(5, 117, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F075A");                  //audio

          it.printf(5, 205, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0493");                  //info

          //
          //Lovelace Card (Standard)
          it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-left
          it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
          it.filled_circle(60, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
          it.filled_circle(295, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //bottom-right

          it.filled_rectangle(60, 48, 235, 73, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(55, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(296, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

          it.filled_circle(61, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
          it.filled_circle(294, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
          it.filled_circle(61, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
          it.filled_circle(294, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                           //bottom-right

          it.filled_rectangle(61, 49, 234, 71, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(56, 54, 5, 60, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(295, 54, 5, 60, id(background_mode_set) ? white : sidebar_dark);

          //
          //Weather Entity

          it.filled_circle(96, 85, 25, id(background_mode_set) ? weather_icon_backdrop_light : weather_icon_backdrop_dark);

          if(id(weather).state == "clear-night") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0594");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Clear Night");
          } else if(id(weather).state == "cloudy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0590");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Cloudy");
          } else if(id(weather).state == "fog") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0591");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Fog");
          } else if(id(weather).state == "hail") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0592");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Hail");
          } else if(id(weather).state == "lightning") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0593");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Lightning");
          } else if(id(weather).state == "lightning-rainy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F067E");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Lightning & Rainy");
          } else if(id(weather).state == "partlycloudy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0595");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Partly Cloudy");
          } else if(id(weather).state == "pouring") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0596");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Pouring");
          } else if(id(weather).state == "rainy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0597");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Rainy");
          } else if(id(weather).state == "snowy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0598");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Snowy");
          } else if(id(weather).state == "snowy-rainy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F067F");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Snowy/Rainy");
          } else if(id(weather).state == "sunny") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0599");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Sunny");
          } else if(id(weather).state == "windy") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F059D");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Windy");
          } else if(id(weather).state == "windy-variant") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F059E");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Windy (Variant)");
          } else if(id(weather).state == "exceptional") {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0F2F");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Exceptional");
          } else {
            it.print(81, 70, id(icon_font_30), weather_icon, "\U000F0599");
            it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Unavailable");
          }

          it.printf(133, 90, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, "%d°F", (int)id(weather_temperature).state);

          //
          //Timer Entity

          //
          //Position 2A - Lovelace Card (Small)
          it.filled_circle(60, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-left
          it.filled_circle(168, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
          it.filled_circle(60, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //bottom-left
          it.filled_circle(168, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-right

          it.filled_rectangle(60, 126, 108, 73, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(55, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(169, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

          it.filled_circle(61, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
          it.filled_circle(167, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
          it.filled_circle(61, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                             //bottom-left
          it.filled_circle(167, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-right

          it.filled_rectangle(61, 127, 107, 71, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(56, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(168, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);

          //
          //Timer Info
          it.filled_circle(114, 156, 20, id(background_mode_set) ? primary_light : icons_secondary_dark);
          it.printf(99, 141, id(icon_font_30), id(background_mode_set) ? white : icons_dark, "\U000F0150");

          if (id(time_remaining_0).state != "0:00:00") {
            it.printf(114, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(time_remaining_0).state.c_str());
          }
          else {
            it.printf(114, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "No Timers Active");
          }

          //
          //Alarmo Entity (will only show if found in Home Assistant)

          if(id(alarm_status).state != "") {
            //
            //Position 2B - Lovelace Card (Small)
            it.filled_circle(187, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-left
            it.filled_circle(295, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
            it.filled_circle(187, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
            it.filled_circle(295, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-right

            it.filled_rectangle(187, 126, 108, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(182, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(188, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-left
            it.filled_circle(294, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
            it.filled_circle(188, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
            it.filled_circle(294, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-right

            it.filled_rectangle(188, 127, 107, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(183, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(295, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);

            if(id(alarm_status).state == "disarmed") {
              it.filled_circle(241, 156, 20, id(background_mode_set) ? entity_icon_backdrop_off_light : entity_icon_backdrop_off_dark);
              it.printf(226, 141, id(icon_font_30), entity_icon_off, "\U000F099E");
              it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
            } else if(id(alarm_status).state == "arming") {
              it.filled_circle(241, 156, 20, amber);
              it.printf(226, 141, id(icon_font_30), white, "\U000F0565");
              it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
            } else if(id(alarm_status).state == "armed_home") {
              it.filled_circle(241, 156, 20, green);
              it.printf(226, 141, id(icon_font_30), white, "\U000F068A");
              it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
            } else if(id(alarm_status).state == "armed_away") {
              it.filled_circle(241, 156, 20, green);
              it.printf(226, 141, id(icon_font_30), white, "\U000F099D");
              it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
            } else if(id(alarm_status).state == "armed_night") {
              it.filled_circle(241, 156, 20, green);
              it.printf(226, 141, id(icon_font_30), white, "\U000F1828");
              it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
            } else {
              it.filled_circle(241, 156, 20, id(background_mode_set) ? entity_icon_backdrop_off_light : entity_icon_backdrop_off_dark);
              it.printf(226, 141, id(icon_font_30), entity_icon_off, "\U000F099E");
              it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
            }
          }

          //
          //Additional State Details

          if(id(mute_switch).state) {
            it.filled_rectangle(0, 232, 340, 240, red);                                                                           //mute-status
          }

          if(id(api_connection) == false || id(wifi_connection) == false) {
            it.filled_rectangle(0, 232, 340, 240, orange);                                                                        //wifi and esphome-connection-status
          }

#### Info/Settings Page ####
## Includes various settings, such as ip address info, wakeword location, screensaver, and background mode ##
      - id: info_page
        lambda: |-
          it.fill(id(background_mode_set) ? id(background_light) : id(background_dark));                                          //background-color

          it.filled_rectangle(0, 0, 320, 40, id(background_mode_set) ? primary_light : primary_dark);
          it.filled_rectangle(0, 0, 40, 240, id(background_mode_set) ? white : sidebar_dark);

          it.line(0, 40, 40, 40, id(background_mode_set) ? divider_light : divider_dark);
          it.line(40, 0, 40, 240, id(background_mode_set) ? divider_light : divider_dark);
          it.line(0, 199, 40, 199, id(background_mode_set) ? divider_light : divider_dark);

          it.printf(5, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F035C");                    //menu
          it.printf(285, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F0185");              //assist

          it.printf(5, 47, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F06E8" );                  //light
          it.printf(5, 82, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0FCE");                   //scenes
          it.printf(5, 117, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F075A");                  //audio

          it.filled_rectangle(2, 202, 36, 36, id(background_mode_set) ? secondary_light : secondary_dark);
          it.printf(5, 205, id(icon_font_30), selected_icon, "\U000F0493");                                                       //info(selected-ver)

          //
          //Lovelace Card (Settings-Ver)
          it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-left
          it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //top-right
          it.filled_circle(60, 225, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //bottom-left
          it.filled_circle(295, 225, 5, id(background_mode_set) ? divider_light : divider_dark);                                  //bottom-right

          it.filled_rectangle(60, 48, 235, 183, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(55, 53, 5, 172, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(296, 53, 5, 172, id(background_mode_set) ? divider_light : divider_dark);

          it.filled_circle(61, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
          it.filled_circle(294, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
          it.filled_circle(61, 224, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
          it.filled_circle(294, 224, 5, id(background_mode_set) ? white : sidebar_dark);                                           //bottom-right

          it.filled_rectangle(61, 49, 234, 181, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(56, 54, 5, 171, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(295, 54, 5, 171, id(background_mode_set) ? white : sidebar_dark);

          //
          //Info page content

          it.printf(106, 60, id(roboto_18), id(background_mode_set) ? black : white, "Wifi Status");
          if(id(wifi_connection) == true) {
            it.printf(106, 80, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "IP: %s", id(ip_addr).state.c_str());
          } 
          else {
            it.printf(106, 80, id(roboto_14), red, "Failed to connect");
          }

          it.printf(106, 103, id(roboto_18), id(background_mode_set) ? black : white, "WakeWord Location");
          if(id(wake_word_engine_location).state == "In Home Assistant") {
            it.printf(106, 123, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "Home Assistant");
          } 
          else {
            it.printf(106, 123, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "Local");
          }

          it.printf(106, 147, id(roboto_18), id(background_mode_set) ? black : white, "Screensaver Enable");
          if(id(s_saver).state == true) {
            it.printf(106, 167, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "Enabled");
          } else {
            it.printf(106, 167, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "Disabled");
          }

          it.printf(106, 191, id(roboto_18), id(background_mode_set) ? black : white, "Background Mode");
          if(id(background_mode).state == "Light") {
            it.printf(106, 211, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "Light");
          } 
          else {
            it.printf(106, 211, id(roboto_14), id(background_mode_set) ? secondary_text_color_light : secondary_text_color_dark, "Dark");
          }

          it.filled_circle(79, 75, 17, blue);
          it.printf(65, 60, id(icon_font_30), white, "\U000F05A9");

          it.filled_circle(79, 120, 17, green);
          it.printf(65, 105, id(icon_font_30), white, "\U000F12C4");

          it.filled_circle(79, 165, 17, orange);
          it.printf(65, 150, id(icon_font_30), white, "\U000F0150");

          it.filled_circle(79, 210, 17, red);
          it.printf(65, 195, id(icon_font_30), white, "\U000F050E");

#### Entity Page ####
## Page for controlling entities. ##
      - id: entities_page
        lambda: |-
          it.fill(id(background_mode_set) ? id(background_light) : id(background_dark));                                          //background-color

          it.filled_rectangle(0, 0, 320, 40, id(background_mode_set) ? primary_light : primary_dark);
          it.filled_rectangle(0, 0, 40, 240, id(background_mode_set) ? white : sidebar_dark);

          it.line(0, 40, 40, 40, id(background_mode_set) ? divider_light : divider_dark);
          it.line(40, 0, 40, 240, id(background_mode_set) ? divider_light : divider_dark);
          it.line(0, 199, 40, 199, id(background_mode_set) ? divider_light : divider_dark);

          it.printf(5, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F035C");                    //menu
          it.printf(285, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F0185");              //assist

          it.filled_rectangle(2, 44, 36, 36, id(background_mode_set) ? secondary_light : secondary_dark);
          it.printf(5, 47, id(icon_font_30), selected_icon, "\U000F06E8" );                                                       //light(selected-ver)
          it.printf(5, 82, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0FCE");                   //scenes
          it.printf(5, 117, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F075A");                  //audio

          it.printf(5, 205, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0493");                  //info

          bool drawCard1 = false;
          bool drawCard2 = false;

          //
          //Draw Lovelace Cards
          switch(id(entity_page)) {
          case 1:
            if (id(entity1_state).state != "") {
              drawCard1 = true;
            }

            if (id(entity2_state).state != "") {
              drawCard2 = true;
            }
            break;
          case 2:
            if (id(entity3_state).state != "") {
              drawCard1 = true;
            }

            if (id(entity4_state).state != "") {
              drawCard2 = true;
            }
            break;
          case 3:
            if (id(entity5_state).state != "") {
              drawCard1 = true;
            }

            if (id(entity6_state).state != "") {
              drawCard2 = true;
            }
            break;
          default:
            //do nothing
            break;
          }

          if (drawCard1 == true) {
            //
            //Position 1 - Lovelace Card (Standard)
            it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-left
            it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
            it.filled_circle(60, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
            it.filled_circle(295, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //bottom-right

            it.filled_rectangle(60, 48, 235, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(55, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(61, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
            it.filled_circle(294, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
            it.filled_circle(61, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
            it.filled_circle(294, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                           //bottom-right

            it.filled_rectangle(61, 49, 234, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(56, 54, 5, 60, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(295, 54, 5, 60, id(background_mode_set) ? white : sidebar_dark);
          }

          if (drawCard2 == true) {
            //
            //Position 2 - Lovelace Card (Standard)
            it.filled_circle(60, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-left
            it.filled_circle(295, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //top-right
            it.filled_circle(60, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
            it.filled_circle(295, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //bottom-right

            it.filled_rectangle(60, 126, 235, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(55, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(61, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-left
            it.filled_circle(294, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                           //top-right
            it.filled_circle(61, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
            it.filled_circle(294, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                           //bottom-right

            it.filled_rectangle(61, 127, 234, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(56, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(295, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);
          }

          //
          //Draw Entity info
          switch(id(entity_page)) {
          case 1:
            //
            //Page Controls
            it.line(46, 39, 75, 39, id(background_mode_set) ? white : icons_secondary_dark);
            it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03A4");
            it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A7");
            it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03AA");

            if (drawCard1 == true) {
              //
              //Entity 1
              it.filled_circle(96, 85, 25, id(background_mode_set) ? primary_light : icons_dark);
              it.image(81, 70, id(entity1_icon), id(background_mode_set) ? id(white) : id(icons_secondary_dark));

              it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "%.16s", id(entity1_name).state.c_str());
              it.printf(133, 90, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, id(entity1_state).state.c_str());
            }

            if (drawCard2 == true) {
              //Entity 2
              it.filled_circle(96, 163, 25, id(background_mode_set) ? primary_light : icons_dark);
              it.image(81, 148, id(entity2_icon), id(background_mode_set) ? id(white) : id(icons_secondary_dark));

              it.printf(133, 148, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "%.16s", id(entity2_name).state.c_str());
              it.printf(133, 168, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, id(entity2_state).state.c_str());
            }

            break;
          case 2:
            //
            //Page Controls
            it.line(81, 39, 110, 39, id(background_mode_set) ? white : icons_secondary_dark);
            it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A4");
            it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03A7");
            it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03AA");

            if (drawCard1 == true) {
              //
              //Entity 3
              it.filled_circle(96, 85, 25, id(background_mode_set) ? primary_light : icons_dark);
              it.image(81, 70, id(entity3_icon), id(background_mode_set) ? id(white) : id(icons_secondary_dark));

              it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "%.16s", id(entity3_name).state.c_str());
              it.printf(133, 90, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, id(entity3_state).state.c_str());
            }

            if (drawCard2 == true) {
              //Entity 4
              it.filled_circle(96, 163, 25, id(background_mode_set) ? primary_light : icons_dark);
              it.image(81, 148, id(entity4_icon), id(background_mode_set) ? id(white) : id(icons_secondary_dark));

              it.printf(133, 148, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "%.16s", id(entity4_name).state.c_str());
              it.printf(133, 168, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, id(entity4_state).state.c_str());
            }

            break;
          case 3:
            //
            //Page Controls
            it.line(116, 39, 145, 39, id(background_mode_set) ? white : icons_secondary_dark);
            it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A4");
            it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A7");
            it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03AA");

            if (drawCard1 == true) {
              //
              //Entity 5
              it.filled_circle(96, 85, 25, id(background_mode_set) ? primary_light : icons_dark);
              it.image(81, 70, id(entity5_icon), id(background_mode_set) ? id(white) : id(icons_secondary_dark));

              it.printf(133, 70, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "%.16s", id(entity5_name).state.c_str());
              it.printf(133, 90, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, id(entity5_state).state.c_str());
            }

            if (drawCard2 == true) {
              //Entity 6
              it.filled_circle(96, 163, 25, id(background_mode_set) ? primary_light : icons_dark);
              it.image(81, 148, id(entity6_icon), id(background_mode_set) ? id(white) : id(icons_secondary_dark));

              it.printf(133, 148, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "%.16s", id(entity6_name).state.c_str());
              it.printf(133, 168, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, id(entity6_state).state.c_str());
            }

            break;
          default:
            break;
          }

#### Media Page ####
## Page for controlling media playback. ##
      - id: media_page
        lambda: |-  
          it.fill(id(background_mode_set) ? id(background_light) : id(background_dark));                                          //background-color

          it.filled_rectangle(0, 0, 320, 40, id(background_mode_set) ? primary_light : primary_dark);
          it.filled_rectangle(0, 0, 40, 240, id(background_mode_set) ? white : sidebar_dark);

          it.line(0, 40, 40, 40, id(background_mode_set) ? divider_light : divider_dark);
          it.line(40, 0, 40, 240, id(background_mode_set) ? divider_light : divider_dark);
          it.line(0, 199, 40, 199, id(background_mode_set) ? divider_light : divider_dark);

          it.printf(5, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F035C");                    //menu
          it.printf(285, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark,"\U000F0185");               //assist

          it.printf(5, 47, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark,"\U000F06E8" );                   //light
          it.printf(5, 82, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark,"\U000F0FCE");                    //scenes
          it.filled_rectangle(2, 114, 36, 36, id(background_mode_set) ? secondary_light : secondary_dark);
          it.printf(5, 117, id(icon_font_30), selected_icon,"\U000F075A");                                                        //audio(selected-ver)

          it.printf(5, 205, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0493");                  //info

          bool drawCard = true;

          //determines which version of card to draw based on player state
          switch(id(media_player_page)) {
            case 1:
              if (id(isExternal) == true && (id(external_player_state).state == "off" || id(external_player_state).state == "unavailable" || id(external_player_state).state == "")) {
                drawCard = false;
              }

              break;
            case 2:
              if (id(media_player1_state).state == "off" || id(media_player1_state).state == "unavailable" || id(media_player1_state).state == "") {
                drawCard = false;
              }

              break;
            case 3:
              if (id(media_player2_state).state == "off" || id(media_player2_state).state == "unavailable" || id(media_player2_state).state == "") {
                drawCard = false;
              }

              break;
            default:
              drawCard = false;
              break;
          }

          if (drawCard == true) {
            //
            //Position 1 - Lovelace Card (Media On-Ver.)
            it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);     //top-left
            it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);    //top-right
            it.filled_circle(60, 165, 5, id(background_mode_set) ? divider_light : divider_dark);    //bottom-left
            it.filled_circle(295, 165, 5, id(background_mode_set) ? divider_light : divider_dark);   //bottom-right

            it.filled_rectangle(60, 48, 235, 123, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(55, 53, 5, 112, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 53, 5, 112, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(61, 54, 5, blue);     //top-left
            it.filled_circle(294, 54, 5, blue);    //top-right
            it.filled_circle(61, 164, 5, blue);    //bottom-left
            it.filled_circle(294, 164, 5, blue);   //bottom-right

            it.filled_rectangle(61, 49, 234, 121, blue);
            it.filled_rectangle(56, 54, 5, 110, blue);
            it.filled_rectangle(295, 54, 5, 110, blue);

            //
            //Media Controls
            it.printf(60, 127, id(icon_font_30), white, "\U000F0425");  //power-toggle
            it.printf(92, 127, id(icon_font_30), white, "\U000F04AE");  //previous
            it.printf(124, 127, id(icon_font_30), white, "\U000F040E"); //play-pause
            it.printf(156, 127, id(icon_font_30), white, "\U000F04AD"); //skip
            it.printf(233, 127, id(icon_font_30), white, "\U000F075E"); //volume down
            it.printf(265, 127, id(icon_font_30), white, "\U000F075D"); //volume down

            //
            //Track Status Bar
            it.filled_rectangle(65, 159, 225, 3, icons_light);
          }
          else {
            //
            //Position 1 - Lovelace Card (Media Off-Ver.)
            it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);     //top-left
            it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);    //top-right
            it.filled_circle(60, 115, 5, id(background_mode_set) ? divider_light : divider_dark);    //bottom-left
            it.filled_circle(295, 115, 5, id(background_mode_set) ? divider_light : divider_dark);   //bottom-right

            it.filled_rectangle(60, 48, 235, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(55, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(61, 54, 5, gray);     //top-left
            it.filled_circle(294, 54, 5, gray);    //top-right
            it.filled_circle(61, 114, 5, gray);    //bottom-left
            it.filled_circle(294, 114, 5, gray);   //bottom-right

            it.filled_rectangle(61, 49, 234, 72, gray);
            it.filled_rectangle(56, 54, 5, 61, gray);
            it.filled_rectangle(295, 54, 5, 61, gray);

            //
            //Power Toggle Only
            it.printf(60, 88, id(icon_font_30), white, "\U000F0425");  //power-toggle
          }

          switch (id(media_player_page)) {
          case 1:
            //
            //Page Controls
            it.line(46, 39, 75, 39, id(background_mode_set) ? white : icons_secondary_dark);
            it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03A4");
            it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A7");
            it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03AA");

            //
            //Local player is always on, so state check should only occur for external

            if (id(isExternal) == false) {
              //
              //Media Player Details
              it.printf(90, 59, id(roboto_12), white, id(local_player_name).state.c_str());
              it.printf(65, 80, id(roboto_18), white, id(local_player_title).state.c_str());
              it.printf(65, 102, id(roboto_12), white, id(local_player_artist).state.c_str());
              it.filled_rectangle(65, 159, id(local_player_progress), 3, white);
            }
            else {
              if (drawCard == true) {
                //
                //Media Details
                it.printf(65, 80, id(roboto_18), white, id(external_player_title).state.c_str());
                it.printf(65, 102, id(roboto_12), white, id(external_player_artist).state.c_str());
                it.filled_rectangle(65, 159, id(local_player_progress), 3, white);
              }

              //Media Player Name
              it.printf(90, 59, id(roboto_12), white, id(external_player_name).state.c_str());
            }

            break;
          case 2:
            //
            //Page Controls
            it.line(81, 39, 110, 39, id(background_mode_set) ? white : icons_secondary_dark);
            it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A4");
            it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03A7");
            it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03AA");

            if (drawCard == true) {
              //
              //Media Player Details
              it.printf(65, 80, id(roboto_18), white, id(media_player1_title).state.c_str());
              it.printf(65, 102, id(roboto_12), white, id(media_player1_artist).state.c_str());
              it.filled_rectangle(65, 159, id(media_player1_progress), 3, white);
            }

            //
            //Media Player Name
            it.printf(90, 59, id(roboto_12), white, id(media_player1_name).state.c_str());

            break;
          case 3:
            //
            //Page Controls
            it.line(116, 39, 145, 39, id(background_mode_set) ? white : icons_secondary_dark);
            it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A4");
            it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A7");
            it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03AA");

            if (drawCard == true) {
              //
              //Media Player Details
              it.printf(65, 80, id(roboto_18), white, id(media_player2_title).state.c_str());
              it.printf(65, 102, id(roboto_12), white, id(media_player2_artist).state.c_str());
              it.filled_rectangle(65, 159, id(media_player2_progress), 3, white);
            }

            //
            //Media Player Name
            it.printf(90, 59, id(roboto_12), white, id(media_player2_name).state.c_str());

            break;
          default:
            //do nothing
            break;
          }

          it.printf(65, 55, id(icon_font_20), white, "\U000F04C3"); //Top-Left Speaker Icon

#### Scenes Page ####
## Page for controlling scenes ##
      - id: scenes_page
        lambda: |-
          it.fill(id(background_mode_set) ? id(background_light) : id(background_dark));                                          //background-color

          it.filled_rectangle(0, 0, 320, 40, id(background_mode_set) ? primary_light : primary_dark);
          it.filled_rectangle(0, 0, 40, 240, id(background_mode_set) ? white : sidebar_dark);

          it.line(0, 40, 40, 40, id(background_mode_set) ? divider_light : divider_dark);
          it.line(40, 0, 40, 240, id(background_mode_set) ? divider_light : divider_dark);
          it.line(0, 199, 40, 199, id(background_mode_set) ? divider_light : divider_dark);

          it.printf(5, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F035C");                    //menu
          it.printf(285, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F0185");              //assist

          it.printf(5, 47, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F06E8" );                  //light
          it.filled_rectangle(2, 79, 36, 36, id(background_mode_set) ? secondary_light : secondary_dark);
          it.printf(5, 82, id(icon_font_30), selected_icon, "\U000F0FCE");                                                        //scenes(selected-ver)
          it.printf(5, 117, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F075A");                  //audio

          it.printf(5, 205, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0493");                  //info

          bool drawCard1 = false;
          bool drawCard2 = false;
          bool drawCard3 = false;
          bool drawCard4 = false;

          switch(id(scenes_page_num)) {
            case 1:
              //
              //Page Controls
              it.line(46, 39, 75, 39, id(background_mode_set) ? white : icons_secondary_dark);
              it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03A4");
              it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A7");
              it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03AA");

              if (id(scene1_name).state != "") {
                drawCard1 = true;
              }

              if (id(scene2_name).state != "") {
                drawCard2 = true;
              }

              if (id(scene3_name).state != "") {
                drawCard3 = true;
              }

              if (id(scene4_name).state != "") {
                drawCard4 = true;
              }

              break;
            case 2:
              //
              //Page Controls
              it.line(81, 39, 110, 39, id(background_mode_set) ? white : icons_secondary_dark);
              it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A4");
              it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03A7");
              it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03AA");

              if (id(scene5_name).state != "") {
                drawCard1 = true;
              }

              if (id(scene6_name).state != "") {
                drawCard2 = true;
              }

              if (id(scene7_name).state != "") {
                drawCard3 = true;
              }

              if (id(scene8_name).state != "") {
                drawCard4 = true;
              }

              break;
            case 3:
              //
              //Page Controls
              it.line(116, 39, 145, 39, id(background_mode_set) ? white : icons_secondary_dark);
              it.printf(46, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A4");
              it.printf(81, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_secondary_unselected_dark, "\U000F03A7");
              it.printf(116, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F03AA");

              if (id(scene9_name).state != "") {
                drawCard1 = true;
              }

              if (id(scene10_name).state != "") {
                drawCard2 = true;
              }

              if (id(scene11_name).state != "") {
                drawCard3 = true;
              }

              if (id(scene12_name).state != "") {
                drawCard4 = true;
              }

              break;
            default:
              //do nothing
              break;
          }

          if (drawCard1 == true) {
            //
            //Position 1A - Lovelace Card (Small)
            it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-left
            it.filled_circle(168, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
            it.filled_circle(60, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
            it.filled_circle(168, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //bottom-right

            it.filled_rectangle(60, 48, 108, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(55, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(169, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(61, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
            it.filled_circle(167, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
            it.filled_circle(61, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
            it.filled_circle(167, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                           //bottom-right

            it.filled_rectangle(61, 49, 107, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(56, 54, 5, 60, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(168, 54, 5, 60, id(background_mode_set) ? white : sidebar_dark);

            it.filled_circle(114, 78, 20, id(background_mode_set) ? primary_light : icons_secondary_dark);
            it.printf(99, 63, id(icon_font_30), id(background_mode_set) ? white : icons_dark, "\U000F0FCE");

            switch(id(scenes_page_num)) {
              case 1:
                it.printf(114, 112, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene1_name).state.c_str());
                break;
              case 2:
                it.printf(114, 112, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene5_name).state.c_str());
                break;
              case 3:
                it.printf(114, 112, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene9_name).state.c_str());
                break;
              default:
                //do nothing
                break;
            }
          }

          if (drawCard2 == true) {
            //
            //Position 1B - Lovelace Card (Small)
            it.filled_circle(187, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-left
            it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-right
            it.filled_circle(187, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
            it.filled_circle(295, 115, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-right

            it.filled_rectangle(187, 48, 108, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(182, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 53, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(188, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
            it.filled_circle(294, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-right
            it.filled_circle(188, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
            it.filled_circle(294, 114, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-right

            it.filled_rectangle(188, 49, 107, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(183, 54, 5, 62, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(295, 54, 5, 62, id(background_mode_set) ? white : sidebar_dark);

            it.filled_circle(241, 78, 20, id(background_mode_set) ? primary_light : icons_secondary_dark);
            it.printf(226, 63, id(icon_font_30), id(background_mode_set) ? white : icons_dark, "\U000F0FCE");

            switch(id(scenes_page_num)) {
              case 1:
                it.printf(241, 112, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene2_name).state.c_str());
                break;
              case 2:
                it.printf(241, 112, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene6_name).state.c_str());
                break;
              case 3:
                it.printf(241, 112, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene10_name).state.c_str());
                break;
              default:
                //do nothing
                break;
            }
          }

          if (drawCard3 == true) {
            //
            //Position 2A - Lovelace Card (Small)
            it.filled_circle(60, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //top-left
            it.filled_circle(168, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
            it.filled_circle(60, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                     //bottom-left
            it.filled_circle(168, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-right

            it.filled_rectangle(60, 126, 108, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(55, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(169, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(61, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
            it.filled_circle(167, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
            it.filled_circle(61, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                             //bottom-left
            it.filled_circle(167, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-right

            it.filled_rectangle(61, 127, 107, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(56, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(168, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);

            it.filled_circle(114, 156, 20, id(background_mode_set) ? primary_light : icons_secondary_dark);
            it.printf(99, 141, id(icon_font_30), id(background_mode_set) ? white : icons_dark, "\U000F0FCE");

            switch(id(scenes_page_num)) {
              case 1:
                it.printf(114, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene3_name).state.c_str());
                break;
              case 2:
                it.printf(114, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene7_name).state.c_str());
                break;
              case 3:
                it.printf(114, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene11_name).state.c_str());
                break;
              default:
                //do nothing
                break;
            }
          }

          if (drawCard4 == true) {
            //
            //Position 2B - Lovelace Card (Small)
            it.filled_circle(187, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-left
            it.filled_circle(295, 131, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-right
            it.filled_circle(187, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-left
            it.filled_circle(295, 193, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //bottom-right

            it.filled_rectangle(187, 126, 108, 73, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(182, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);
            it.filled_rectangle(296, 131, 5, 62, id(background_mode_set) ? divider_light : divider_dark);

            it.filled_circle(188, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-left
            it.filled_circle(294, 132, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
            it.filled_circle(188, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
            it.filled_circle(294, 192, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-right

            it.filled_rectangle(188, 127, 107, 71, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(183, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);
            it.filled_rectangle(295, 132, 5, 60, id(background_mode_set) ? white : sidebar_dark);

            it.filled_circle(241, 156, 20, id(background_mode_set) ? primary_light : icons_secondary_dark);
            it.printf(226, 141, id(icon_font_30), id(background_mode_set) ? white : icons_dark, "\U000F0FCE");

            switch(id(scenes_page_num)) {
              case 1:
                it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene4_name).state.c_str());
                break;
              case 2:
                it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene8_name).state.c_str());
                break;
              case 3:
                it.printf(241, 190, id(roboto_9), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::CENTER, "%.21s", id(scene12_name).state.c_str());
                break;
              default:
                //do nothing
                break;
            }
          }

#### Assist Pages ####
## These pages load images for using Assist. If you want to change these, images are referenced from above ##
      - id: loading_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(loading_img), ImageAlign::CENTER);
      - id: listening_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(listening_img), ImageAlign::CENTER);
      - id: thinking_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(thinking_img), ImageAlign::CENTER);
          if (id(display_conversation).state) {
            it.filled_rectangle(0 , 0 , 320 , 30 , Color::WHITE );
            it.printf(10, 10, id(my_font16), Color::BLACK, "%s", id(text_request).state.c_str());
          } 
      - id: replying_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(replying_img), ImageAlign::CENTER);
          if (id(display_conversation).state) {
            it.filled_rectangle(0 , 0 , 320 , 30 , Color::WHITE );
            it.filled_rectangle(0 , 210 , 320 , 30 , Color::WHITE );
            it.printf(10, 10, id(my_font16), Color::BLACK, "%s", id(text_request).state.c_str());
            it.printf(10, 220, id(my_font16), Color::BLACK, "%s", id(text_response).state.c_str());
          }
      - id: error_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_img), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 120, id(my_font4), yellow, TextAlign::CENTER, "Mic & Speaker - Muted");

#### Timer Pages ####
## For use with timers. Show remaining time, or when a timer completes ##
      - id: time_remaining_page
        lambda: |-
          it.fill(id(black));
          it.printf(160, 20, id(my_font5), light_blue, TextAlign::CENTER, "Active Timers");
          it.printf(160, 70, id(icon_font_80), light_blue, TextAlign::CENTER, "\U000F0150"); 
          it.printf(160, 155, id(my_font6), light_blue, TextAlign::CENTER, "%s", id(time_remaining_0).state.c_str());

      - id: timer_finished_page
        lambda: |-
          it.fill(id(black));
          it.printf(160, 20, id(my_font5), light_blue, TextAlign::CENTER, "Timer Finished");
          it.printf(160, 120, id(icon_font_180), light_blue, TextAlign::CENTER, "\U000F009E");
          it.printf(160, 215, id(my_font5), light_blue, TextAlign::CENTER, "tap screen to dismiss");

#### Screensaver Page ####
## When enabled, this screen will display after a set timeout. Displays time and date, and a timer if active ##
      - id: saver_page
        lambda: |-
          it.fill(id(black));
           
          const char *days[] {"${sunday}","${monday}","${tuesday}","${wednesday}","${thursday}","${friday}","${saturday}"};
          const char *months[] {"${jan}","${feb}","${mar}","${apr}","${may}","${jun}","${jul}","${aug}","${sept}","${oct}","${nov}","${dec}"};

          it.printf(160, 28, id(my_font5), light_blue, TextAlign::CENTER, "%s %d %s", days[id(ha_time).now().day_of_week - 1], id(ha_time).now().day_of_month, months[id(ha_time).now().month - 1]);
          
          if(id(time_display_format).state == "24 Hr") {
            it.strftime(160, 88, id(my_font82), TextAlign::CENTER, "%H:%M", id(ha_time).now());
          } else {
            it.strftime(160, 88, id(my_font2), TextAlign::CENTER, "%l:%M%p", id(ha_time).now());
          }

          if (id(time_remaining_0).state != "0:00:00") {
            it.printf(3, 177, id(icon_font_60), light_blue, "\U000F0150");
            it.printf(66, 192, id(roboto_30), light_blue, "%s", id(time_remaining_0).state.c_str());
          }

#### OTA Page ####
## Shows when an update occurs, vis ESPHome or other update method ##
      - id: ota_page
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 60, id(icon_font_80), red, TextAlign::CENTER, "\U000F08D6");  
          it.printf((it.get_width() / 2), (it.get_height() / 2), id(my_font3), red, TextAlign::CENTER, "FIRMWARE UPDATING");
          it.printf(160,190, id(my_font3), red, TextAlign::CENTER, "won't be long....");

#### Alarm Pages ####
## Part of recent update to include alarm functionality (not yet functioning fully) ##
      - id: alarm_page   #### alarm page #####
        lambda: |-
          if(id(alarm_status).state == "disarmed") {
          it.printf(10, 10, id(icon_font_180), red, "\U000F099E");
          it.printf(40, 200, id(my_font3), red, "Disarmed");
          } else if(id(alarm_status).state == "arming") {
          it.printf(10, 10, id(icon_font_180), amber, "\U000F0565");
          it.printf(40, 200, id(my_font3), amber, "Arming");
          } else if(id(alarm_status).state == "armed_home") {
          it.printf(10, 10, id(icon_font_180), green, "\U000F068A");
          it.printf(60, 200, id(my_font3), green, "Armed");
          } else if(id(alarm_status).state == "armed_away") {
          it.printf(10, 10, id(icon_font_180), green, "\U000F099D");
          it.printf(60, 200, id(my_font3), green, "Armed");
          } else if(id(alarm_status).state == "armed_night") {
          it.printf(10, 10, id(icon_font_180), green, "\U000F1828");
          it.printf(60, 200, id(my_font3), green, "Armed");
          }
          if(id(alarm_status).state == "armed_home") {
          it.printf(225, 5, id(icon_font_60), green, "\U000F068A");
          it.printf(233, 60, id(my_font18), light_blue, "Home");
          } else {
          it.printf(225, 5, id(icon_font_60), blue_drk, "\U000F068A");
          it.printf(233, 60, id(my_font18), light_blue, "Home");
          }
          if(id(alarm_status).state == "armed_away") {
          it.printf(225, 80, id(icon_font_60), green, "\U000F099D");
          it.printf(233, 135, id(my_font18), light_blue, "Away");
          } else {          
          it.printf(225, 80, id(icon_font_60), blue_drk, "\U000F099D");
          it.printf(233, 135, id(my_font18), light_blue, "Away");
          }
          if(id(alarm_status).state == "armed_night") {
          it.printf(225, 155, id(icon_font_60), green, "\U000F1828");         
          it.printf(228, 215, id(my_font18), light_blue, "Night");
          } else {
          it.printf(225, 155, id(icon_font_60), blue_drk, "\U000F1828");         
          it.printf(228, 215, id(my_font18), light_blue, "Night");
          }
      - id: alarm_home_activate_page ##### alarm  home activation page #####
        lambda: |-
          auto pin_state = id(current_pin).c_str();
          it.print(310, 80, id(my_font3), TextAlign::RIGHT, pin_state);
          // loop for numbers 1 - 9
          for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) {
          int number = i * 3 + j + 1;
          int x_position = 15 + j * 56;  // Ajustement de la position en X
          int y_position = 15 + i * 56;  // Ajustement de la position en Y
          it.rectangle(x_position, y_position, 48, 48, light_blue);  // Taille du rectangle ajustée
          char num_str[2];
          snprintf(num_str, sizeof(num_str), "%d", number);
          it.print(x_position + 24, y_position + 24, id(my_font3), TextAlign::CENTER, num_str);  // Centrage du chiffre
          }
           }
          it.rectangle(71, 183, 48, 48, light_blue);  // Position et taille du rectangle ajustées
          it.print(95, 207, id(my_font3), TextAlign::CENTER, "0");  // Centrage du chiffre "0"
          //it.filled_rectangle(198, 110, 108, 50, green);
          if(id(alarm_status).state == "disarmed"){
          it.filled_rectangle(198, 110, 108, 50, red);
          it.print(255, 135, id(my_font3), white, TextAlign::CENTER, "Arm");
          } else if(id(alarm_status).state == "armed_home"){
          it.filled_rectangle(198, 110, 108, 50, green); 
          it.print(255, 135, id(my_font3), white, TextAlign::CENTER, "Disarm");
          }                 
          it.filled_rectangle(198, 170, 108, 50, blue_drk);
          it.print(255, 195, id(my_font3), white, TextAlign::CENTER, "Clear");
          if(id(alarm_status).state == "disarmed") {
          it.printf(255, 30, id(icon_font_55), red, TextAlign::CENTER, "\U000F068A");
          it.printf(255, 70, id(my_font3), red, TextAlign::CENTER, "Disarmed");
          } else if(id(alarm_status).state == "arming") {
          it.printf(255, 30, id(icon_font_55), amber, TextAlign::CENTER, "\U000F0565");
          it.printf(255, 70, id(my_font3), amber, TextAlign::CENTER, "Arming");
          } else if(id(alarm_status).state == "armed_home") {
          it.printf(255, 30, id(icon_font_55), green, TextAlign::CENTER, "\U000F068A");
          it.printf(255, 70, id(my_font3), green, TextAlign::CENTER, "Armed");
          }         
      - id: alarm_away_activate_page ##### alarm away activation page #####
        lambda: |-
          auto pin_state = id(current_pin).c_str();
          it.print(310, 80, id(my_font3), TextAlign::RIGHT, pin_state);
          // loop for numbers 1 - 9
          for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) {
          int number = i * 3 + j + 1;
          int x_position = 15 + j * 56;  // Ajustement de la position en X
          int y_position = 15 + i * 56;  // Ajustement de la position en Y
          it.rectangle(x_position, y_position, 48, 48, light_blue);  // Taille du rectangle ajustée
          char num_str[2];
          snprintf(num_str, sizeof(num_str), "%d", number);
          it.print(x_position + 24, y_position + 24, id(my_font3), TextAlign::CENTER, num_str);  // Centrage du chiffre
          }
           }
          it.rectangle(71, 183, 48, 48, light_blue);  // Position et taille du rectangle ajustées
          it.print(95, 207, id(my_font3), TextAlign::CENTER, "0");  // Centrage du chiffre "0"
          if(id(alarm_status).state == "disarmed"){
          it.filled_rectangle(198, 110, 108, 50, red);
          it.print(255, 135, id(my_font3), white, TextAlign::CENTER, "Arm");
          } else if(id(alarm_status).state == "armed_away"){
          it.filled_rectangle(198, 110, 108, 50, green); 
          it.print(255, 135, id(my_font3), white, TextAlign::CENTER, "Disarm");
          }
          it.filled_rectangle(198, 170, 108, 50, blue_drk);
          it.print(255, 195, id(my_font3), white, TextAlign::CENTER, "Clear");
          if(id(alarm_status).state == "disarmed") {
          it.printf(255, 30, id(icon_font_55), red, TextAlign::CENTER, "\U000F099D");
          it.printf(255, 70, id(my_font3), red, TextAlign::CENTER, "Disarmed");
          } else if(id(alarm_status).state == "arming") {
          it.printf(255, 30, id(icon_font_55), amber, TextAlign::CENTER, "\U000F0565");
          it.printf(255, 70, id(my_font3), amber, TextAlign::CENTER, "Arming");
          } else if(id(alarm_status).state == "armed_away") {
          it.printf(255, 30, id(icon_font_55), green, TextAlign::CENTER, "\U000F099D");
          it.printf(255, 70, id(my_font3), green, TextAlign::CENTER, "Armed");
          }  
      - id: alarm_night_activate_page ##### alarm night activation page #####
        lambda: |-
          auto pin_state = id(current_pin).c_str();
          it.print(310, 80, id(my_font3), TextAlign::RIGHT, pin_state);
          // loop for numbers 1 - 9
          for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) {
          int number = i * 3 + j + 1;
          int x_position = 15 + j * 56;  // Ajustement de la position en X
          int y_position = 15 + i * 56;  // Ajustement de la position en Y
          it.rectangle(x_position, y_position, 48, 48, light_blue);  // Taille du rectangle ajustée
          char num_str[2];
          snprintf(num_str, sizeof(num_str), "%d", number);
          it.print(x_position + 24, y_position + 24, id(my_font3), TextAlign::CENTER, num_str);  // Centrage du chiffre
          }
           }
          it.rectangle(71, 183, 48, 48, light_blue);  // Position et taille du rectangle ajustées
          it.print(95, 207, id(my_font3), TextAlign::CENTER, "0");  // Centrage du chiffre "0"
          if(id(alarm_status).state == "disarmed"){
          it.filled_rectangle(198, 110, 108, 50, red);
          it.print(255, 135, id(my_font3), white, TextAlign::CENTER, "Arm");
          } else if(id(alarm_status).state == "armed_night"){
          it.filled_rectangle(198, 110, 108, 50, green); 
          it.print(255, 135, id(my_font3), white, TextAlign::CENTER, "Disarm");
          }
          it.filled_rectangle(198, 170, 108, 50, blue_drk);
          it.print(255, 195, id(my_font3), white, TextAlign::CENTER, "Clear");
          if(id(alarm_status).state == "disarmed") {
          it.printf(255, 30, id(icon_font_55), red, TextAlign::CENTER, "\U000F1828");
          it.printf(255, 70, id(my_font3), red, TextAlign::CENTER, "Disarmed");
          } else if(id(alarm_status).state == "arming") {
          it.printf(255, 30, id(icon_font_55), amber, TextAlign::CENTER, "\U000F0565");
          it.printf(255, 70, id(my_font3), amber, TextAlign::CENTER, "Arming");
          } else if(id(alarm_status).state == "armed_night") {
          it.printf(255, 30, id(icon_font_55), green, TextAlign::CENTER, "\U000F1828");
          it.printf(255, 70, id(my_font3), green, TextAlign::CENTER, "Armed");
          }

#### Additional Settings Pages ####
## These pages go beyond the scope of the standard settings page. ##
## Screen Timeout Settings (Not currently programmed, use Home Assistant to change values) ##
      - id: timeout_settings_page
        lambda: |-
          it.fill(id(black));
          //it.printf(160, 50, id(icon_font_55), light_blue, TextAlign::CENTER, "\U000F0150"); 
          it.printf(160, 20, id(my_font5), light_blue, TextAlign::CENTER, "Screen Settings");  
          it.printf(160, 60, id(my_font5), light_blue, TextAlign::CENTER, "Screen Saver"); 
          it.printf(50, 80, id(my_font), light_blue, "Delay secs");
          it.printf(185, 80, id(my_font), light_blue, "Dim Brightness");
          it.printf(105, 100, id(icon_font_55), lime, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(65, 100, id(icon_font_55), lime, TextAlign::RIGHT, "\U000F0B26");          
          it.rectangle(65 , 105 , 40 , 40 , lime);
          it.printf(85, 125, id(my_font5), light_blue, TextAlign::CENTER, "%.f", id(s_saver_delay).state);
          it.printf(20, 160, id(my_font), light_blue, "Screen off delay"); 
          it.printf(105, 180, id(icon_font_55), lime, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(65, 180, id(icon_font_55), lime, TextAlign::RIGHT, "\U000F0B26");          
          it.rectangle(65 , 180 , 40 , 40 , lime);
          it.printf(85, 200, id(my_font5), light_blue, TextAlign::CENTER, "%.f", id(s_saver_blank_delay).state);
          it.printf(255, 100, id(icon_font_55), pink, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(215, 100, id(icon_font_55), pink, TextAlign::RIGHT, "\U000F0B26");          
          it.rectangle(215 , 105 , 40 , 40 , pink);
          it.printf(235, 125, id(my_font5), light_blue, TextAlign::CENTER, "%.f", id(s_saver_brightness).state);

## Wifi Diagnostics ##
      - id: wifi_page
        lambda: |-
          it.fill(id(background_mode_set) ? id(background_light) : id(background_dark));                                          //background-color

          it.filled_rectangle(0, 0, 320, 40, id(background_mode_set) ? primary_light : primary_dark);
          it.filled_rectangle(0, 0, 40, 240, id(background_mode_set) ? white : sidebar_dark);

          it.line(0, 40, 40, 40, id(background_mode_set) ? divider_light : divider_dark);
          it.line(40, 0, 40, 240, id(background_mode_set) ? divider_light : divider_dark);
          it.line(0, 199, 40, 199, id(background_mode_set) ? divider_light : divider_dark);

          it.printf(5, 5, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F035C");                    //menu
          it.printf(285, 5, id(icon_font_30), id(background_mode_set) ? white : icons_secondary_dark, "\U000F0185");              //assist

          it.printf(5, 47, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F06E8" );                  //light
          it.printf(5, 82, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0FCE");                   //scenes
          it.printf(5, 117, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F075A");                  //audio

          it.printf(5, 205, id(icon_font_30), id(background_mode_set) ? icons_light : icons_dark, "\U000F0493");                  //info

          //
          //Lovelace Card (Settings-Ver)
          it.filled_circle(60, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                    //top-left
          it.filled_circle(295, 53, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //top-right
          it.filled_circle(60, 225, 5, id(background_mode_set) ? divider_light : divider_dark);                                   //bottom-left
          it.filled_circle(295, 225, 5, id(background_mode_set) ? divider_light : divider_dark);                                  //bottom-right

          it.filled_rectangle(60, 48, 235, 183, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(55, 53, 5, 172, id(background_mode_set) ? divider_light : divider_dark);
          it.filled_rectangle(296, 53, 5, 172, id(background_mode_set) ? divider_light : divider_dark);

          it.filled_circle(61, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                             //top-left
          it.filled_circle(294, 54, 5, id(background_mode_set) ? white : sidebar_dark);                                            //top-right
          it.filled_circle(61, 224, 5, id(background_mode_set) ? white : sidebar_dark);                                            //bottom-left
          it.filled_circle(294, 224, 5, id(background_mode_set) ? white : sidebar_dark);                                           //bottom-right

          it.filled_rectangle(61, 49, 234, 181, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(56, 54, 5, 171, id(background_mode_set) ? white : sidebar_dark);
          it.filled_rectangle(295, 54, 5, 171, id(background_mode_set) ? white : sidebar_dark);

          //
          //Wifi Settings Content
          it.printf(60, 63, id(roboto_18), id(background_mode_set) ? black : primary_text_color_dark, "Wifi Diagnostics");

          it.printf(60, 95, id(roboto_14), id(background_mode_set) ? black : primary_text_color_dark, "This is additional information related");
          it.printf(60, 110, id(roboto_14), id(background_mode_set) ? black : primary_text_color_dark, "to this device's wifi connection.");

          it.printf(60, 136, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, "ssid");
          it.printf(295, 136, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::RIGHT, "%s", id(connected_ssid).state.c_str());

          it.printf(60, 152, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, "bssid");
          it.printf(295, 152, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::RIGHT, "%s", id(connected_bssid).state.c_str());

          it.printf(60, 168, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, "Device MAC");
          it.printf(295, 168, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::RIGHT, "%s", id(device_mac).state.c_str());
          
          it.printf(60, 184, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, "Signal Strength");
          it.printf(295, 184, id(roboto_12), id(background_mode_set) ? black : primary_text_color_dark, TextAlign::RIGHT, "%4.f%%", id(wifi_percent).state);

i2c:
  - id: bus_a
    sda: GPIO08
    scl: GPIO18
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz

  - sda: GPIO41
    scl: GPIO40
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 50kHz
    id: bus_b

touchscreen:
  - platform: gt911
    i2c_id: bus_a
    id: gt911_touchscreen
    interrupt_pin:
      number: GPIO3
      ignore_strapping_warning: true
    on_touch:
      - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
    on_release:
      - script.execute: saver_enabled 
    
binary_sensor:

#### Top-Left Button #####
## Change this to use the top-left button in different ways. Currently toggles the display ##
  - platform: gpio
    id: top_left_button
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    on_press:
      - if:
          condition:
            - display.is_displaying_page: saver_page
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - display.page.show: idle_page
            - script.execute: saver_enabled
            - component.update: s3_box_lcd
          else:
            if:
              condition:
                - display.is_displaying_page: idle_page
              then:
                - script.execute: saver_enabled
                - display.page.show: saver_page
                - component.update: s3_box_lcd


#### Circle Button ####
## Change this to use the circle button in different ways. Currently enables sleep mode on the main page ##
  - platform: gt911
    id: home_button
    index: 0
    on_press:
      if:
        condition:
          - display.is_displaying_page: idle_page  
        then:
          - script.execute: saver_enabled
        else: 
          - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
          - display.page.show: idle_page
          - component.update: s3_box_lcd
         

#### Menu Buttons ####
## These serve as global buttons on each page to navigate the device. ##
  - platform: touchscreen
    name: settings_button
    internal: true
    x_min: 0
    x_max: 40
    y_min: 200
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: info_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    id: entities_button
    internal: true
    x_min: 0
    x_max: 40
    y_min: 43
    y_max: 82
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: entities_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    id: media_player_button
    internal: true
    x_min: 0
    x_max: 40
    y_min: 112
    y_max: 152
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: media_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    id: scenes_button
    internal: true
    x_min: 0
    x_max: 40
    y_min: 77
    y_max: 117
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: scenes_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    id: assist_button 
    internal: true
    x_min: 280
    x_max: 320
    y_min: 0
    y_max: 40
    on_press:
      then:
        - micro_wake_word.stop
        - delay: 50ms
        - lambda: id(va).set_use_wake_word(false);
        - delay: 50ms
        - voice_assistant.stop:
        - delay: 50ms 
        - voice_assistant.start
        - display.page.show: listening_page
        - component.update: s3_box_lcd
    on_release:
      - delay: 100ms
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - voice_assistant.stop: 
            - lambda: id(va).set_use_wake_word(true);
            - delay: 10ms
            - voice_assistant.start_continuous: 
          else:
            - voice_assistant.stop: 
            - delay: 100ms            
            - micro_wake_word.start         

#### Idle/Main Menu Navigation ####
## These go to pages shown on the idle page (mostly timer and alarm) ##
  - platform: touchscreen
    page_id: idle_page
    id: alarm_navigate
    x_min: 183
    x_max: 300
    y_min: 126
    y_max: 198
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        if:
          condition:
            - lambda: if(id(alarm_status).state != "") {return true;} else {return false;}
          then:
            - display.page.show: alarm_page
            - component.update: s3_box_lcd

#### Entity Page Controls ####
## These enable the top-bar to change Entity pages. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: entities_page
    id: entity_page_1
    internal: true
    x_min: 41
    x_max: 77
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(entity_page) = 1;
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_page_2
    internal: true
    x_min: 78
    x_max: 112
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(entity_page) = 2;
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_page_3
    internal: true
    x_min: 113
    x_max: 147
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(entity_page) = 3;
        - component.update: s3_box_lcd

#### Entity Controls ####
## These enable touchscreen controls for entities specified. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: entities_page
    id: entity_control1
    internal: true
    x_min: 55
    x_max: 300
    y_min: 48
    y_max: 120
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
            - lambda: if(id(entity_page) == 1) {return 1;} else {return 0;}
            then:
              - homeassistant.service:
                  service: ${entity1_service}
                  data:
                    entity_id: ${entity1}
              - display.page.show: entities_page
              - delay: 3s
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_control2
    internal: true
    x_min: 55
    x_max: 300
    y_min: 126
    y_max: 198
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
            - lambda: if(id(entity_page) == 1) {return 1;} else {return 0;}
            then:
              - homeassistant.service:
                  service: ${entity2_service}
                  data:
                    entity_id: ${entity2}
              - display.page.show: entities_page
              - delay: 3s
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_control3
    internal: true
    x_min: 55
    x_max: 300
    y_min: 48
    y_max: 120
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
            - lambda: if(id(entity_page) == 2) {return 1;} else {return 0;}
            then:
              - homeassistant.service:
                  service: ${entity3_service}
                  data:
                    entity_id: ${entity3}
              - display.page.show: entities_page
              - delay: 3s
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_control4
    internal: true
    x_min: 55
    x_max: 300
    y_min: 126
    y_max: 198
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
            - lambda: if(id(entity_page) == 2) {return 1;} else {return 0;}
            then:
              - homeassistant.service:
                  service: ${entity4_service}
                  data:
                    entity_id: ${entity4}
              - display.page.show: entities_page
              - delay: 3s
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_control5
    internal: true
    x_min: 55
    x_max: 300
    y_min: 48
    y_max: 120
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
            - lambda: if(id(entity_page) == 3) {return 1;} else {return 0;}
            then:
              - homeassistant.service:
                  service: ${entity5_service}
                  data:
                    entity_id: ${entity5}
              - display.page.show: entities_page
              - delay: 3s
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: entities_page
    id: entity_control6
    internal: true
    x_min: 55
    x_max: 300
    y_min: 126
    y_max: 198
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
            - lambda: if(id(entity_page) == 3) {return 1;} else {return 0;}
            then:
              - homeassistant.service:
                  service: ${entity6_service}
                  data:
                    entity_id: ${entity6}
              - display.page.show: entities_page
              - delay: 3s
              - component.update: s3_box_lcd

#### Media Page Controls ####
## These enable the top-bar to change Media pages. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: media_page
    id: media_page_1
    internal: true
    x_min: 41
    x_max: 77
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(media_player_page) = 1;
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_page_2
    internal: true
    x_min: 78
    x_max: 112
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(media_player_page) = 2;
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_page_3
    internal: true
    x_min: 113
    x_max: 147
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(media_player_page) = 3;
        - component.update: s3_box_lcd

#### Media Player Controls ####
## These enable touchscreen controls for the media player. Only change if you know what you are doing ##
## Local/External Player ##
  - platform: touchscreen
    page_id: media_page
    id: local_power_toggle
    x_min: 60
    x_max: 90
    y_min: 88
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
            then:
              - logger.log: "Power Toggle Pressed"
              - if:
                  condition:
                    - switch.is_off: output_audio
                  then:
                    - homeassistant.service:
                        service: media_player.toggle
                        data:
                          entity_id: media_player.${local_player}
                  else:
                    - if:
                        condition:
                          - lambda: if(id(external_player_state).state == "off") {return true;} else {return false;}
                        then:
                          - homeassistant.service:
                              service: media_player.turn_on
                              data:
                                entity_id: media_player.${external_player}
                        else:
                          - homeassistant.service:
                              service: media_player.turn_off
                              data:
                                entity_id: media_player.${external_player}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: local_previous_track
    x_min: 92
    x_max: 122
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
            then:
              - logger.log: "Previous track pressed"
              - if:
                  condition:
                    - switch.is_off: output_audio
                  then:
                    - homeassistant.service:
                        service: media_player.media_previous_track
                        data:
                          entity_id: media_player.${local_player}
                  else:
                    - homeassistant.service:
                        service: media_player.media_previous_track
                        data:
                          entity_id: media_player.${external_player}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: local_play_pause
    x_min: 124
    x_max: 154
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - media_player.is_idle:
              - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
            then:
              - media_player.play
            else:
              - media_player.stop
        - logger.log: "Play Paused pressed"

  - platform: touchscreen
    page_id: media_page
    id: local_next_track
    x_min: 156
    x_max: 186
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
            then:
              - logger.log: "Next track pressed"
              - if:
                  condition:
                    - switch.is_off: output_audio
                  then:
                    - homeassistant.service:
                        service: media_player.media_next_track
                        data:
                          entity_id: media_player.${local_player}
                  else:
                    - homeassistant.service:
                        service: media_player.media_next_track
                        data:
                          entity_id: media_player.${external_player}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: local_volume_down
    x_min: 233
    x_max: 263
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
            then:
              - logger.log: "Volume Minus pressed"
              - lambda: |-
                  if (id(speaker_volume) > 0) {
                    id(speaker_volume) -= 1;
                  }
              - component.update: s3_box_lcd
              - script.execute: set_volume

  - platform: touchscreen
    page_id: media_page
    id: local_volume_up
    x_min: 265
    x_max: 295
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 1) {return true;} else {return false;}
            then:
              - logger.log: "Volume Plus pressed"
              - lambda: |-
                  if (id(speaker_volume) < 10) {
                    id(speaker_volume) += 1;
                  }
              - component.update: s3_box_lcd
              - script.execute: set_volume

## Media Player1 ##
  - platform: touchscreen
    page_id: media_page
    id: media_player1_power_toggle
    x_min: 60
    x_max: 90
    y_min: 88
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
            then:
              - if:
                  condition:
                    - lambda: if(id(media_player1_state).state == "off") {return true;} else {return false;}
                  then:
                    - homeassistant.service:
                        service: media_player.turn_on
                        data:
                          entity_id: media_player.${media_player1}
                  else:
                    - homeassistant.service:
                        service: media_player.turn_off
                        data:
                          entity_id: media_player.${media_player1}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player1_previous_track
    x_min: 92
    x_max: 122
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.media_previous_track
                  data:
                    entity_id: media_player.${media_player1}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player1_play_pause
    x_min: 124
    x_max: 154
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.media_play_pause
                  data:
                    entity_id: media_player.${media_player1}

  - platform: touchscreen
    page_id: media_page
    id: media_player1_next_track
    x_min: 156
    x_max: 186
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.media_next_track
                  data:
                    entity_id: media_player.${media_player1}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player1_volume_down
    x_min: 233
    x_max: 263
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.volume_down
                  data:
                    entity_id: media_player.${media_player1}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player1_volume_up
    x_min: 265
    x_max: 295
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.volume_up
                  data:
                    entity_id: media_player.${media_player1}
              - component.update: s3_box_lcd

## Media Player2 ##
  - platform: touchscreen
    page_id: media_page
    id: media_player2_power_toggle
    x_min: 60
    x_max: 90
    y_min: 88
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
            then:
              - if:
                  condition:
                    - lambda: if(id(media_player2_state).state == "off") {return true;} else {return false;}
                  then:
                    - homeassistant.service:
                        service: media_player.turn_on
                        data:
                          entity_id: media_player.${media_player2}
                  else:
                    - homeassistant.service:
                        service: media_player.turn_off
                        data:
                          entity_id: media_player.${media_player2}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player2_previous_track
    x_min: 92
    x_max: 122
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.media_previous_track
                  data:
                    entity_id: media_player.${media_player2}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player2_play_pause
    x_min: 124
    x_max: 154
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.media_play_pause
                  data:
                    entity_id: media_player.${media_player2}

  - platform: touchscreen
    page_id: media_page
    id: media_player2_next_track
    x_min: 156
    x_max: 186
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.media_next_track
                  data:
                    entity_id: media_player.${media_player2}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player2_volume_down
    x_min: 233
    x_max: 263
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.volume_down
                  data:
                    entity_id: media_player.${media_player2}
              - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: media_page
    id: media_player2_volume_up
    x_min: 265
    x_max: 295
    y_min: 127
    y_max: 157
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if(id(media_player_page) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: media_player.volume_up
                  data:
                    entity_id: media_player.${media_player2}
              - component.update: s3_box_lcd

#### Scenes Page Controls ####
## These enable the top-bar to change Entity pages. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: scenes_page
    id: scenes_page_1
    internal: true
    x_min: 41
    x_max: 77
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(scenes_page_num) = 1;
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scenes_page_2
    internal: true
    x_min: 78
    x_max: 112
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(scenes_page_num) = 2;
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scenes_page_3
    internal: true
    x_min: 113
    x_max: 147
    y_min: 0
    y_max: 39
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda: id(scenes_page_num) = 3;
        - component.update: s3_box_lcd

#### Scene Controls ####
## These enable touchscreen controls for scenes specified. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: scenes_page
    id: scene_control1
    x_min: 55
    x_max: 173
    y_min: 48
    y_max: 120
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 1) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene1}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene5}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene9}
        - display.page.show: scenes_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scene_control2
    x_min: 183
    x_max: 300
    y_min: 48
    y_max: 120
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 1) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene2}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene6}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene10}
        - display.page.show: scenes_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scene_control3
    x_min: 55
    x_max: 173
    y_min: 126
    y_max: 198
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 1) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene3}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene7}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene11}
        - display.page.show: scenes_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scene_control4
    x_min: 183
    x_max: 300
    y_min: 126
    y_max: 198
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 1) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene4}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 2) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene8}
        - if:
            condition:
              - lambda: if (id(scenes_page_num) == 3) {return true;} else {return false;}
            then:
              - homeassistant.service:
                  service: scene.turn_on
                  data:
                    entity_id: scene.${scene12}
        - display.page.show: scenes_page
        - component.update: s3_box_lcd

#### Settings Page Controls ####
## These controls navigate to additional settings such as wifi or wakeword details. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: info_page
    id: wifi_extras
    x_min: 55
    x_max: 300
    y_min: 55
    y_max: 99
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: wifi_page
        - component.update: s3_box_lcd

#### Settings Controls ####
## These enable touchscreen controls for the info/settings page. Only change if you know what you are doing ##
  - platform: touchscreen
    page_id: info_page
    id: ss_toggle
    x_min: 55
    x_max: 300
    y_min: 145
    y_max: 185
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: s_saver
        - component.update: s3_box_lcd
        - script.execute: saver_enabled
              
  - platform: touchscreen
    page_id: info_page
    id: background_mode_toggle
    x_min: 55
    x_max: 300
    y_min: 190
    y_max: 230
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - select.next: background_mode_opt
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: info_page
    id: ww_chang_hass
    x_min: 55
    x_max: 300
    y_min: 100
    y_max: 140
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - select.operation:
            id: wake_word_engine_location
            operation: Next
            cycle: true   
        - component.update: s3_box_lcd

#### Screensaver & Timer Controls ####
## These wake the device from sleep mode or when a timer completes ##
  - platform: touchscreen
    page_id: saver_page
    id: ss_wake
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: idle_page
        - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: timer_finished_page
    id: timer_dismiss
    internal: true
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.turn_off: timer_ringing
        - display.page.show: idle_page
        - component.update: s3_box_lcd

#### Additional Settings ####
##### Timeout settings buttons #####
  - id: ss_sleep_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 25
    x_max: 60
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_delay).state - 5;
            if (sleep < 1) {
              sleep = 1;
            }
            auto call = id(s_saver_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd

  - id: ss_sleep_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 110
    x_max: 145
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_delay).state + 5;
            auto call = id(s_saver_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
        
  - id: ss_blank_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 25
    x_max: 60
    y_min: 180
    y_max: 220
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_blank_delay).state - 5;
            if (sleep < 1) {
              sleep = 1;
            }
            auto call = id(s_saver_blank_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd

  - id: ss_blank_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 110
    x_max: 145
    y_min: 180
    y_max: 220
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_blank_delay).state + 5;
            auto call = id(s_saver_blank_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
        
  - id: ss_bright_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 165
    x_max: 195
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int bright = id(s_saver_brightness).state - 5;
            if (bright < 1) {
              bright = 1;
            }
            auto call = id(s_saver_brightness).make_call();
            call.set_value(bright);
            call.perform();
        - component.update: s3_box_lcd

  - id: ss_bright_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 260
    x_max: 295
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int bright = id(s_saver_brightness).state + 5;
            auto call = id(s_saver_brightness).make_call();
            call.set_value(bright);
            call.perform();
        - component.update: s3_box_lcd

#### Alarm Controls ####
## Use to control alarm pages ##
  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page      
    id: alarm_key_1
    internal: true
    x_min: 15
    x_max: 63
    y_min: 15
    y_max: 63
    on_press:
      - script.execute: increment_digit_1
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_2
    internal: true
    x_min: 71
    x_max: 119
    y_min: 15
    y_max: 63
    on_press:
      - script.execute: increment_digit_2
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_3
    internal: true
    x_min: 127
    x_max: 175
    y_min: 15
    y_max: 63
    on_press:
      - script.execute: increment_digit_3
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_4
    internal: true
    x_min: 15
    x_max: 63
    y_min: 71
    y_max: 119
    on_press:
      - script.execute: increment_digit_4
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_5
    internal: true
    x_min: 71
    x_max: 119
    y_min: 71
    y_max: 119
    on_press:
      - script.execute: increment_digit_5
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_6
    internal: true
    x_min: 127
    x_max: 175
    y_min: 71
    y_max: 119
    on_press:
      - script.execute: increment_digit_6
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_7
    internal: true
    x_min: 15
    x_max: 63
    y_min: 127
    y_max: 175
    on_press:
      - script.execute: increment_digit_7
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_8
    internal: true
    x_min: 71
    x_max: 119
    y_min: 127
    y_max: 175
    on_press:
      - script.execute: increment_digit_8
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_9
    internal: true
    x_min: 127
    x_max: 175
    y_min: 127
    y_max: 175
    on_press:
      - script.execute: increment_digit_9
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_0
    internal: true
    x_min: 71
    x_max: 119
    y_min: 183
    y_max: 231
    on_press:   
      - media_player.play_media:
          media_url: '${home_assistant_host}/local/sounds/key.mp3'
      - script.execute: increment_digit_0 
      - component.update: s3_box_lcd     
           
  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: clear_pin
    x_min: 198
    x_max: 306
    y_min: 170
    y_max: 220
    on_press:
      then:
        - lambda: |-
            id(current_pin) = "";
        - component.update: s3_box_lcd
            
  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_ok
    x_min: 198
    x_max: 306
    y_min: 110
    y_max: 160
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: |-
                  return (id(alarm_status).state == "arming" || id(alarm_status).state == "armed_away" || id(alarm_status).state == "armed_home" || id(alarm_status).state == "armed_night");
            then:
              - homeassistant.service:
                  service: alarm_control_panel.alarm_disarm
                  data:
                    entity_id: alarm_control_panel.alarmo
                    code: !lambda return id(current_pin).c_str();
              - lambda: |-
                  id(current_pin) = "";
            else:
              - if:
                  condition:
                    and:
                      - lambda: |-
                          return (id(alarm_status).state == "disarmed");
                      - display.is_displaying_page: alarm_home_activate_page                         
                  then:
                    - homeassistant.service:
                        service: alarm_control_panel.alarm_arm_home
                        data:
                          entity_id: alarm_control_panel.alarmo
                          code: !lambda return id(current_pin).c_str();
                    - lambda: |-
                        id(current_pin) = "";  
                  else:
                    - if:
                        condition:
                          and:
                            - lambda: |-
                                return (id(alarm_status).state == "disarmed");
                                
                            - display.is_displaying_page: alarm_away_activate_page
                        then:
                          - homeassistant.service:
                              service: alarm_control_panel.alarm_arm_away
                              data:
                                entity_id: alarm_control_panel.alarmo
                                code: !lambda return id(current_pin).c_str();
                          - lambda: |-
                              id(current_pin) = "";     
                        
                        else:                        
                          - if:
                              condition:
                                and:
                                  - lambda: |-
                                      return (id(alarm_status).state == "disarmed");
                                  - display.is_displaying_page: alarm_night_activate_page
                              then:
                                - homeassistant.service:
                                    service: alarm_control_panel.alarm_arm_night
                                    data:
                                      entity_id: alarm_control_panel.alarmo
                                      code: !lambda return id(current_pin).c_str();
                                - lambda: |-
                                    id(current_pin) = ""; 
        - component.update: s3_box_lcd      
                                                           
  - platform: touchscreen
    page_id: alarm_page
    id: arm_disarm_home
    x_min: 215
    x_max: 320
    y_min: 5
    y_max: 75
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - display.page.show: alarm_home_activate_page
        - component.update: s3_box_lcd   
        
  - platform: touchscreen
    page_id: alarm_page
    id: arm_disarm_away
    x_min: 215
    x_max: 320
    y_min: 80
    y_max: 150
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - display.page.show: alarm_away_activate_page
        - component.update: s3_box_lcd   
        
  - platform: touchscreen
    page_id: alarm_page
    id: arm_disarm_night
    x_min: 215
    x_max: 320
    y_min: 155
    y_max: 240
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - display.page.show: alarm_night_activate_page
        - component.update: s3_box_lcd  
